{
  "collection": {
    "_": {
      "postman_id": "book-crud-api-comprehensive"
    },
    "item": [
      {
        "id": "12b683f9-911d-4b88-8a98-828cf8fa5394",
        "name": "SECTION 1 - Basic Functional Tests",
        "item": [
          {
            "id": "ba3e9646-11db-40b8-aba2-ae5fe4bd5fff",
            "name": "Server Start Check (root) - verify server responds",
            "request": {
              "description": {
                "content": "Check that the server responds at the base URL. If Flask is not started this will fail to connect.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  ""
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "76bcabd5-ca3c-4d1f-8b33-54772bb3a422",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Server responds (any 2xx or 3xx)', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200,201,202,203,204,301,302,304]);",
                    "});",
                    "",
                    "pm.test('Content-Type is application/json when present', function () {",
                    "    if (pm.response.headers.has('Content-Type')) {",
                    "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "    } else {",
                    "        pm.skip('No Content-Type header present');",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "c3199d8b-e350-4726-9ff5-8c6e9b274fbf"
                }
              }
            ]
          },
          {
            "id": "3464d6c2-60bf-4f96-bdea-60b7bff2a7e5",
            "name": "CORS check - looks for Access-Control-Allow-Origin header",
            "request": {
              "description": {
                "content": "Sends Origin header and checks for Access-Control-Allow-Origin in response headers.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Origin",
                  "value": "http://example.com"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "43ed3862-7fa6-4c69-b02e-650574cc35ed",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Health endpoint returns 200 or 503', function () {",
                    "    pm.expect([200,503]).to.include(pm.response.code);",
                    "});",
                    "",
                    "pm.test('CORS header present (Access-Control-Allow-Origin)', function () {",
                    "    if (pm.response.headers.has('Access-Control-Allow-Origin')) {",
                    "        pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.be.a('string');",
                    "    } else {",
                    "        pm.fail('CORS header Access-Control-Allow-Origin not present â€” ensure CORS is enabled on server');",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "dce0984a-4f78-4b12-8e51-4c7660365697"
                }
              }
            ]
          },
          {
            "id": "610bc6ca-27b3-48f0-bfdd-76fb76e7bbb2",
            "name": "Health check - healthy DB (expect 200)",
            "request": {
              "description": {
                "content": "Expect 200 and JSON {status: 'healthy'} when DB is up.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "de8531ef-c61d-46ae-ad90-5f2d92e26384",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status is 200 OK', function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "});",
                    "",
                    "pm.test('Response is JSON and contains status field', function () {",
                    "    pm.response.to.have.header('Content-Type');",
                    "    var json = {};",
                    "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response is not JSON'); }",
                    "    pm.expect(json).to.have.property('status');",
                    "    pm.expect(json.status).to.be.oneOf(['healthy','ok','Healthy','OK']);",
                    "});"
                  ],
                  "_lastExecutionId": "ec331470-300b-488b-8cef-0aa7b09e30b9"
                }
              }
            ]
          },
          {
            "id": "25d92d13-917a-45b4-b3a3-dee1256c2697",
            "name": "Health check - DB down (must simulate by stopping DB before running)",
            "request": {
              "description": {
                "content": "Simulate DB down by stopping PostgreSQL. This test expects HTTP 503. If DB is up the test will fail with an instructive message.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e19209fc-7e44-4f7d-9a34-5e76924ab8f9",
                  "type": "text/javascript",
                  "exec": [
                    "if (pm.response.code === 503) {",
                    "    pm.test('DB down - returned 503 as expected', function () { pm.expect(pm.response.code).to.equal(503); });",
                    "} else {",
                    "    pm.test('DB down test not executed - DB appears up', function () {",
                    "        pm.expect.fail('Database is up. To validate this test, stop PostgreSQL and re-run this request. Received status: ' + pm.response.code);",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "949c406b-6d84-4634-8297-511065e51e3b"
                }
              }
            ]
          },
          {
            "id": "6b4b6853-f11b-466f-8d7b-891b301109de",
            "name": "Fetch all books - expect JSON array (200)",
            "request": {
              "description": {
                "content": "Retrieve all books. When DB has data returns array of objects, when empty returns [].",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  ""
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "661b485e-097d-4039-bb2b-6a2bcfc982b8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status 200', function () { pm.expect(pm.response.code).to.equal(200); });",
                    "pm.test('Response is JSON array', function () {",
                    "    var json = [];",
                    "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                    "    pm.expect(json).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "6c0362a1-47b0-4a86-9745-9136f4d7e9c1"
                }
              }
            ]
          },
          {
            "id": "49bb763c-6910-46c6-88f6-d2b090989af5",
            "name": "Fetch all books - empty DB (manual prepare: truncate book table)",
            "request": {
              "description": {
                "content": "Before running this request manually truncate the book table. Expect [] and 200 OK.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  ""
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "eaffc7df-6bff-498a-90a2-c0ad003e5e72",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status 200', function () { pm.expect(pm.response.code).to.equal(200); });",
                    "pm.test('Response is JSON array (possibly empty)', function () {",
                    "    var json = pm.response.json();",
                    "    pm.expect(json).to.be.an('array');",
                    "    pm.test('Array empty as requested', function () {",
                    "        // This will fail if DB wasn't truncated - instruct user to truncate if not empty",
                    "        if (json.length !== 0) { pm.expect.fail('DB not empty. To validate this test truncate the book table before running.'); }",
                    "    });",
                    "});"
                  ],
                  "_lastExecutionId": "4a7a37f9-39ca-4318-91a8-99142ed2d9f5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1be62a4a-0754-4927-8b19-2813d1b50623",
        "name": "SECTION 2 - Create Book API (Positive & Validation Tests)",
        "item": [
          {
            "id": "fdf690fe-8ef2-4d08-9ea3-af8c1cd92868",
            "name": "Create - Valid book (positive)",
            "request": {
              "description": {
                "content": "Creates a valid book. Stores created id into {{created_book_id}} for later use (if response returns id).",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "create"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101\", \"date\": \"2025-01-01\", \"Cost\": 49.99}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3763ce0f-d1dc-4f27-891f-d99502c51664",
                  "type": "text/javascript",
                  "exec": [
                    "// No pre-req"
                  ],
                  "_lastExecutionId": "cb5e7dcd-4850-4120-8369-c6c7a2292f39"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d6e71fc4-267e-4878-91ba-ae34cc9c82a6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status is 201 Created', function () {",
                    "    pm.expect(pm.response.code).to.equal(201);",
                    "});",
                    "",
                    "pm.test('Response is JSON and echoes fields', function () {",
                    "    var json = {};",
                    "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                    "    pm.expect(json).to.have.property('publisher');",
                    "    pm.expect(json).to.have.property('name');",
                    "    pm.expect(json).to.have.property('date');",
                    "    pm.expect(json).to.have.property('Cost');",
                    "});",
                    "",
                    "// If server returns an id, save it to an environment variable for subsequent tests",
                    "try {",
                    "    var j = pm.response.json();",
                    "    if (j.id) { pm.environment.set('created_book_id', j.id); }",
                    "} catch(e) {}"
                  ],
                  "_lastExecutionId": "5aabef3f-9b05-4e8c-b8ab-b083464c318d"
                }
              }
            ]
          },
          {
            "id": "263c3409-2fde-424c-bb88-c2ace30df9af",
            "name": "Create - Missing required field (publisher)",
            "request": {
              "description": {
                "content": "Omit publisher field. Expect 400 with error message about missing field.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "create"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\"name\": \"Flask101\", \"date\": \"2025-01-01\", \"Cost\": 49.99}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "27cff61d-1d9b-4a4d-8139-f481f745248e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status is 400 Bad Request', function () {",
                    "    pm.expect(pm.response.code).to.equal(400);",
                    "});",
                    "pm.test('Error mentions missing publisher', function () {",
                    "    var json = {};",
                    "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                    "    pm.expect(JSON.stringify(json).toLowerCase()).to.include('publisher');",
                    "});"
                  ],
                  "_lastExecutionId": "0c5a2a77-1a7a-45bf-9a86-3f11850bfe16"
                }
              }
            ]
          },
          {
            "id": "e1942855-0b06-493a-bd11-f34c2a776843",
            "name": "Create - Invalid cost type",
            "request": {
              "description": {
                "content": "Cost as string should validate and return 400.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "create"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\"publisher\": \"Packt\", \"name\": \"Flask\", \"date\": \"2025-01-01\", \"Cost\": \"abc\"}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bfc69a22-aa5b-47aa-8b94-430b60c22b31",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status 400 for invalid cost', function () { pm.expect(pm.response.code).to.equal(400); });",
                    "pm.test('Error mentions cost or numeric', function () {",
                    "    var json = pm.response.json();",
                    "    pm.expect(JSON.stringify(json).toLowerCase()).to.satisfy(function(s) {",
                    "        return s.includes('cost') || s.includes('numeric') || s.includes('invalid');",
                    "    });",
                    "});"
                  ],
                  "_lastExecutionId": "2dcc29d1-6dac-44fb-8e32-b9b2f1fac982"
                }
              }
            ]
          },
          {
            "id": "ee540b41-bccc-4173-bc1a-f0355153d757",
            "name": "Create - Invalid date format",
            "request": {
              "description": {
                "content": "Invalid date format should return a 400 and helpful error.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "create"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\"publisher\": \"Packt\", \"name\": \"Flask\", \"date\": \"32-13-2025\", \"Cost\": 39.99}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ec1be176-8e1b-46b3-a34d-ae38d61fb1da",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Expect 400 for invalid date format', function () { pm.expect(pm.response.code).to.equal(400); });",
                    "pm.test('Error mentions date format', function () {",
                    "    var json = pm.response.json();",
                    "    pm.expect(JSON.stringify(json).toLowerCase()).to.include('date');",
                    "});"
                  ],
                  "_lastExecutionId": "058fee17-84e9-41de-a295-781241dfaf93"
                }
              }
            ]
          },
          {
            "id": "1416723a-716c-43cc-9298-0a6dccc2f75e",
            "name": "Create - Empty body",
            "request": {
              "description": {
                "content": "Empty JSON should return 400 with missing body message.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "create"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d3943a1d-3a4c-4ed7-8f94-8e6b636f8be8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Expect 400 for empty body', function () { pm.expect(pm.response.code).to.equal(400); });",
                    "pm.test('Error mentions missing body', function () {",
                    "    var json = pm.response.json();",
                    "    pm.expect(JSON.stringify(json).toLowerCase()).to.include('body');",
                    "});"
                  ],
                  "_lastExecutionId": "54d33be2-f1e2-4c15-8850-8a1946fd1123"
                }
              }
            ]
          },
          {
            "id": "992dea20-fee8-44a6-942c-ed98e83edacb",
            "name": "Create - Missing JSON header (send raw text)",
            "request": {
              "description": {
                "content": "If server enforces JSON header this should return 400 with request must be JSON.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "create"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "hello"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "15873d5d-91b5-415e-81a0-24f608621ec1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Expect 400 when content-type not application/json', function () { pm.expect(pm.response.code).to.equal(400); });",
                    "pm.test('Error mentions JSON', function () {",
                    "    var txt = pm.response.text();",
                    "    pm.expect(txt.toLowerCase()).to.include('json');",
                    "});"
                  ],
                  "_lastExecutionId": "7067fb22-588a-4d46-af1c-66c91a8d4fd1"
                }
              }
            ]
          },
          {
            "id": "4c7937d1-7c53-4943-b911-6ece760aa326",
            "name": "Create - Extra fields (author) - server may ignore or accept",
            "request": {
              "description": {
                "content": "Extra fields may be ignored or written depending on schema. Accept either 201 or 200 with success.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "create"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\"publisher\": \"Packt\", \"name\": \"Flask\", \"date\": \"2025-01-01\", \"Cost\": 39.99, \"author\": \"xyz\"}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4141936f-3dab-4fce-af3a-ce6167770dda",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Expect 201 (created) or 200 (accepted) or 400 if validation fails', function () {",
                    "    pm.expect([200,201,400]).to.include(pm.response.code);",
                    "});",
                    "",
                    "pm.test('If created, response includes the extra field or ignores it', function () {",
                    "    try { var j = pm.response.json(); if (pm.response.code===201 || pm.response.code===200) {",
                    "        // optional check",
                    "        if (j.author) { pm.expect(j.author).to.equal('xyz'); }",
                    "    } } catch(e) {}",
                    "});"
                  ],
                  "_lastExecutionId": "5932b961-f432-4644-80c2-678270bd31aa"
                }
              }
            ]
          },
          {
            "id": "a479ad6a-274c-4b80-bc19-6acbe56b9e80",
            "name": "Create - Database constraint violation (duplicate name) - make name unique in DB before running",
            "request": {
              "description": {
                "content": "To validate constraint violation, make the 'name' column unique and insert a duplicate. Expects 400 with constraint error.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "create"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\"publisher\": \"Packt\", \"name\": \"FLASK_DUPLICATE_TEST\", \"date\": \"2025-01-01\", \"Cost\": 39.99}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f8182023-0436-4f0b-b4a3-18408e87bc47",
                  "type": "text/javascript",
                  "exec": [
                    "if (pm.response.code === 400) {",
                    "    pm.test('Constraint violation reported', function () {",
                    "        var j = pm.response.json();",
                    "        pm.expect(JSON.stringify(j).toLowerCase()).to.satisfy(function(s){ return s.includes('constraint') || s.includes('duplicate') || s.includes('unique'); });",
                    "    });",
                    "} else {",
                    "    pm.test('DB constraint test not validated', function () { pm.expect.fail('Server did not return 400. Ensure DB uniqueness constraint is applied and re-run. Received: ' + pm.response.code); });",
                    "}"
                  ],
                  "_lastExecutionId": "b8178430-9747-446f-92b4-d9ceac616d63"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0838a763-289a-48ec-8287-a77165982214",
        "name": "SECTION 3 - Update Book API",
        "item": [
          {
            "id": "a66e53e7-a49d-4a70-87f0-fb46153d7cdc",
            "name": "Update - Valid update existing record (uses {{created_book_id}})",
            "request": {
              "description": {
                "content": "Update the previously created book. Ensure {{created_book_id}} is set by the Create positive test.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "update",
                  "{{created_book_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101-Updated\", \"date\": \"2025-02-02\", \"Cost\": 59.99}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
                  "type": "text/javascript",
                  "exec": [
                    "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                    "pm.test('Expect 200 OK for successful update', function() { pm.expect(pm.response.code).to.equal(200); });",
                    "pm.test('Response mentions updated', function() { var txt = pm.response.text(); pm.expect(txt.toLowerCase()).to.include('update'); });"
                  ],
                  "_lastExecutionId": "7c614590-1cb8-4c23-87e7-279db420cd4a"
                }
              }
            ]
          },
          {
            "id": "6329c6d5-2ff1-4c18-9af7-b1a72ec6eb2d",
            "name": "Update - Non-existing ID",
            "request": {
              "description": {
                "content": "Update a non-existing ID. Expected 404 with Book not found.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "update",
                  "{{non_existing_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\"publisher\": \"Packt\", \"name\": \"NoSuchBook\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "57961c8e-8e30-45fa-9609-115718e06da3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Expect 404 Not Found for non-existing ID', function() { pm.expect(pm.response.code).to.equal(404); });",
                    "pm.test('Response mentions not found', function() { var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('not found'); });"
                  ],
                  "_lastExecutionId": "151541ba-dfe0-4cb5-a17a-4a5ebb8f08cf"
                }
              }
            ]
          },
          {
            "id": "3dc9892e-b497-4788-866d-acabfc0d3d6d",
            "name": "Update - Invalid ID format (abc)",
            "request": {
              "description": {
                "content": "Invalid ID format should hit Flask routing mismatch and return 404.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "update",
                  "abc"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\"publisher\": \"Packt\", \"name\": \"InvalidIDTest\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bee0c1b5-6d66-43a7-b7f3-1e9e5bd64134",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Expect 404 for invalid ID format', function() { pm.expect(pm.response.code).to.equal(404); });"
                  ],
                  "_lastExecutionId": "6af184a9-8308-4426-b1e3-09a26e3645d8"
                }
              }
            ]
          },
          {
            "id": "c76208b2-ae07-4057-b10c-3e1037ff9180",
            "name": "Update - Missing field in update (publisher)",
            "request": {
              "description": {
                "content": "Update with missing required field. Expect 400 with missing publisher error.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "update",
                  "{{created_book_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\"name\": \"FlaskPro\"}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b3fabf6f-c3cb-4a03-aaa6-7973f55b6b14",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Expect 400 when required publisher missing', function(){ pm.expect(pm.response.code).to.equal(400); });",
                    "pm.test('Error mentions publisher', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); } catch(e) { j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('publisher'); });"
                  ],
                  "_lastExecutionId": "d19cec5d-da61-4fac-95b9-37b939db5156"
                }
              }
            ]
          },
          {
            "id": "d02f5261-44a0-40e3-a0cb-d7efd81b0bc8",
            "name": "Update - Invalid date in update",
            "request": {
              "description": {
                "content": "Invalid date should return 400.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "update",
                  "{{created_book_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\"publisher\": \"Packt\", \"name\": \"FlaskBadDate\", \"date\": \"31-02-2025\", \"Cost\": 25.0}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8490355f-96f9-4b5b-b11d-697affe0bccc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Expect 400 for invalid date', function(){ pm.expect(pm.response.code).to.equal(400); });",
                    "pm.test('Error mentions date', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('date'); });"
                  ],
                  "_lastExecutionId": "fc17e9b0-c9b5-41fe-9078-0093b79f66ea"
                }
              }
            ]
          },
          {
            "id": "702f6f52-eed5-4661-828d-9f320d19efc9",
            "name": "Update - DB down during update (stop DB before running)",
            "request": {
              "description": {
                "content": "Stop DB before running. Expects 503. If DB is up test fails with guidance.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "update",
                  "{{created_book_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\"publisher\": \"Packt\", \"name\": \"WhileDBDown\", \"date\": \"2025-01-01\", \"Cost\": 1.0}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "51102f7c-d844-4d3a-bd41-30df64d41c45",
                  "type": "text/javascript",
                  "exec": [
                    "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                    "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                  ],
                  "_lastExecutionId": "d562783c-1742-45ab-ac03-0732f1332a75"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ed02e6f9-f44d-4d74-ad14-b20d483678f4",
        "name": "SECTION 4 - Delete Book API",
        "item": [
          {
            "id": "a0cf52f2-cd25-48c1-b9db-57b72fc9303c",
            "name": "Delete - Valid book (uses {{created_book_id}})",
            "request": {
              "description": {
                "content": "Delete the book created earlier. Ensure created_book_id is set.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "delete",
                  "{{created_book_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "aded9cc9-b8e5-4025-8da5-839a27ad9d84",
                  "type": "text/javascript",
                  "exec": [
                    "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                    "pm.test('Expect 200 OK for successful delete', function(){ pm.expect(pm.response.code).to.equal(200); });",
                    "pm.test('Response mentions deleted', function(){ pm.expect(pm.response.text().toLowerCase()).to.include('deleted'); });"
                  ],
                  "_lastExecutionId": "297d602f-96b2-4799-a9c5-a6cc9df52d2f"
                }
              }
            ]
          },
          {
            "id": "d32bb377-5b1f-4ba2-abca-8eb78c0218ba",
            "name": "Delete - Non-existing ID",
            "request": {
              "description": {
                "content": "Deleting a non-existing ID should return 404 and an error message.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "delete",
                  "{{non_existing_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b98e8419-cd60-4dbb-9d98-c795c7339c35",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Expect 404 for non-existing ID', function(){ pm.expect(pm.response.code).to.equal(404); });",
                    "pm.test('Response mentions not found', function(){ pm.expect(pm.response.text().toLowerCase()).to.include('not found'); });"
                  ],
                  "_lastExecutionId": "ad902a9a-3a5c-410f-94d0-f5d82df6bbbd"
                }
              }
            ]
          },
          {
            "id": "4ae0de74-bbc1-4fa0-ae2c-2706c57d5e49",
            "name": "Delete - Invalid ID type (abc)",
            "request": {
              "description": {
                "content": "Invalid ID type should return 404 from Flask routing.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "delete",
                  "abc"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "45354e39-7e12-4fdf-955e-3606f1fd8fca",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Expect 404 for invalid ID type', function(){ pm.expect(pm.response.code).to.equal(404); });"
                  ],
                  "_lastExecutionId": "6fbf5347-89ce-4d4f-b4f7-7cd4525fc59d"
                }
              }
            ]
          },
          {
            "id": "143f6ab0-4091-4aca-b358-a129ac75ac7d",
            "name": "Delete - DB connection down (stop DB before running)",
            "request": {
              "description": {
                "content": "Stop DB before running. Expect 503.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "delete",
                  "{{created_book_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "dc9e0652-ed92-4c2e-9095-32e4ca85b9ff",
                  "type": "text/javascript",
                  "exec": [
                    "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                    "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                  ],
                  "_lastExecutionId": "b82dbae3-4d4c-4c97-9102-da2ff48870dc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5afeae19-faed-4766-adef-5d4832e48c62",
        "name": "SECTION 5-9 - System, Errors, Operational & Contract Checks",
        "item": [
          {
            "id": "5a6350e1-7427-4cc6-b61f-7884c9e32336",
            "name": "DB connection failure - change env base_url to invalid host before running",
            "request": {
              "description": {
                "content": "To simulate change DB host, adjust server DB config. Postman cannot change DB host remotely â€” run after changing server config or run against a server configured with invalid DB host.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b49cc2be-2e6a-455b-80ae-baab0c41d264",
                  "type": "text/javascript",
                  "exec": [
                    "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                    "else { pm.test('DB connection failure not reproduced', function(){ pm.expect.fail('Expected 503 when DB host invalid. Ensure server is configured to use invalid DB host and re-run. Received: '+pm.response.code); }); }"
                  ],
                  "_lastExecutionId": "37a09ffa-0e4d-4762-9516-085e427f39ed"
                }
              }
            ]
          },
          {
            "id": "14798c41-16fe-44ce-93ee-54fb8fc1e4c8",
            "name": "Unhandled Python exception simulation (modify server route to raise Exception)",
            "request": {
              "description": {
                "content": "To validate global exception handling temporarily modify server to raise an exception for this route. Expect 500 and a JSON error.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "some-route-that-raises"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "82d10a0a-f72e-4986-92e7-003ef9387a32",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Expect 500 when server raises unhandled exception', function(){ pm.expect([500,502,503]).to.include(pm.response.code); });",
                    "pm.test('Response contains JSON error field', function(){ try{ var j=pm.response.json(); pm.expect(j).to.have.property('error'); } catch(e) { pm.expect.fail('Response not JSON with error'); } });"
                  ],
                  "_lastExecutionId": "1adff991-edd1-4fe1-8cc1-eb2127462578"
                }
              }
            ]
          },
          {
            "id": "2f75e601-c496-49b3-ba7e-6d322183118b",
            "name": "JSON decoding error - send malformed JSON",
            "request": {
              "description": {
                "content": "Sends malformed JSON. Server should return an error (400 or 500) handled globally.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "create"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{ \"publisher\": \"Packt\", }"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "59455131-40cd-4148-8cff-fa5ff7647b02",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Expect 4xx or 5xx for malformed JSON', function(){ pm.expect(pm.response.code).to.be.above(399); });",
                    "pm.test('Response mentions JSON parse or error', function(){ var txt = pm.response.text().toLowerCase(); pm.expect(txt).to.satisfy(function(s){ return s.includes('json') || s.includes('parse') || s.includes('error'); }); });"
                  ],
                  "_lastExecutionId": "d42f92c8-4743-488e-880e-88ca5dbe9946"
                }
              }
            ]
          },
          {
            "id": "0b3ded0f-18a9-4cb8-82ad-01a45ed9f296",
            "name": "Missing route - GET /unknown",
            "request": {
              "description": {
                "content": "Hit a missing route. Expect 404 and JSON error message or HTML 404 depending on app configuration.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "unknown"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "840d1989-a15e-42d0-a0b1-dc66b57e5951",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Expect 404 Not Found', function(){ pm.expect(pm.response.code).to.equal(404); });",
                    "pm.test('If JSON returned it should contain error key', function(){ try{ var j=pm.response.json(); pm.expect(j).to.have.property('error'); } catch(e){ pm.test('Response not JSON - likely HTML 404', function(){ pm.expect(pm.response.code).to.equal(404); }); } });"
                  ],
                  "_lastExecutionId": "c9365af3-c58e-429f-8be2-3eb7ba8881fa"
                }
              }
            ]
          },
          {
            "id": "5cbfb557-7409-4416-992b-4ead6dc719b2",
            "name": "Invalid HTTP method - PATCH /create (expect 405)",
            "request": {
              "description": {
                "content": "PATCH is not allowed on /create; expect 405 Method Not Allowed or 404 depending on Flask configuration.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "create"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\"publisher\": \"x\"}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c70a8350-95ed-4944-a10d-da0b4eda377a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Expect 405 or 404 for invalid method', function(){ pm.expect([404,405]).to.include(pm.response.code); });"
                  ],
                  "_lastExecutionId": "557d6b64-2b70-4e7f-8681-c3c3699dd0e4"
                }
              }
            ]
          },
          {
            "id": "e6f65a70-2d3a-4e60-938d-f1f4a01f35fe",
            "name": "API contract & consistency - check headers and JSON for GET / and /health",
            "request": {
              "description": {
                "content": "Verifies Content-Type header and JSON format for a representative endpoint.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "12f58465-c5bd-41d9-ab6a-0be2584c0d88",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Content-Type header includes application/json', function(){ pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
                    "pm.test('Response is valid JSON', function(){ try{ pm.response.json(); } catch(e){ pm.expect.fail('Response not valid JSON'); } });"
                  ],
                  "_lastExecutionId": "c4224feb-9615-4868-a4c4-e4905172bf78"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1b69542f-90a0-4d96-87fe-a594135cf9b4",
        "name": "Schema Validation Tests",
        "item": [
          {
            "id": "df6af206-8dd2-48fd-976f-ea52e81dce89",
            "name": "Schema - Health endpoint",
            "request": {
              "description": {
                "content": "Validate /health response against schema: {status: string}",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "84ab08b4-a962-4165-a081-691c7985bbd9",
                  "type": "text/javascript",
                  "exec": [
                    "var healthSchema = {",
                    "  'type': 'object',",
                    "  'properties': { 'status': { 'type': 'string' } },",
                    "  'required': ['status']",
                    "};",
                    "pm.test('Health response matches schema', function() {",
                    "  var json = pm.response.json();",
                    "  pm.expect(tv4.validate(json, healthSchema)).to.be.true;",
                    "  if (!tv4.validate(json, healthSchema)) {",
                    "    console.log(tv4.error);",
                    "  }",
                    "});"
                  ],
                  "_lastExecutionId": "9ea13118-707d-4381-80b3-39dace2bb731"
                }
              }
            ]
          },
          {
            "id": "d0b77e02-1882-4450-8d37-b09546d56a38",
            "name": "Schema - Get all books (array of book objects)",
            "request": {
              "description": {
                "content": "Validate GET / returns an array of book objects",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  ""
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "13c8f3ce-2964-49ea-86ed-636927a6b0c5",
                  "type": "text/javascript",
                  "exec": [
                    "var booksSchema = {",
                    "  'type': 'array',",
                    "  'items': {",
                    "    'type': 'object',",
                    "    'properties': {",
                    "      'id': { 'type': ['integer','number','null'] },",
                    "      'publisher': { 'type': 'string' },",
                    "      'name': { 'type': 'string' },",
                    "      'date': { 'type': 'string' },",
                    "      'Cost': { 'type': ['number','integer'] }",
                    "    },",
                    "    'required': ['publisher','name','date','Cost']",
                    "  }",
                    "};",
                    "pm.test('Books response matches schema', function() {",
                    "  var json = pm.response.json();",
                    "  pm.expect(tv4.validate(json, booksSchema)).to.be.true;",
                    "  if (!tv4.validate(json, booksSchema)) { console.log(tv4.error); }",
                    "});"
                  ],
                  "_lastExecutionId": "1f819bbc-f3be-4c3c-9c4c-786e24860456"
                }
              }
            ]
          },
          {
            "id": "6f310ece-bb19-4279-972e-9ce79cfa2927",
            "name": "Schema - Create book response (object)",
            "request": {
              "description": {
                "content": "Validate POST /create response conforms to the created book object schema.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "create"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"SchemaTestBook\", \"date\": \"2025-01-01\", \"Cost\": 9.99}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "841aa4c5-3df6-43d3-97d3-60556959d25c",
                  "type": "text/javascript",
                  "exec": [
                    "var bookSchema = {",
                    "  'type': 'object',",
                    "  'properties': {",
                    "    'id': { 'type': ['integer','number'] },",
                    "    'publisher': { 'type': 'string' },",
                    "    'name': { 'type': 'string' },",
                    "    'date': { 'type': 'string' },",
                    "    'Cost': { 'type': ['number','integer'] }",
                    "  },",
                    "  'required': ['publisher','name','date','Cost']",
                    "};",
                    "pm.test('Create response matches book schema', function() {",
                    "  try { var json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                    "  pm.expect(tv4.validate(json, bookSchema)).to.be.true;",
                    "  if (!tv4.validate(json, bookSchema)) { console.log(tv4.error); }",
                    "});",
                    "",
                    "// Save created id if present",
                    "try { var j = pm.response.json(); if (j.id) { pm.environment.set('created_book_id', j.id); } } catch(e) {}"
                  ],
                  "_lastExecutionId": "51c13ce4-b257-4558-93e4-2b57a1f072fa"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "any",
        "value": "http://127.0.0.1:5000",
        "key": "base_url"
      },
      {
        "type": "any",
        "value": "",
        "key": "created_book_id"
      },
      {
        "type": "any",
        "value": "999999",
        "key": "non_existing_id"
      },
      {
        "type": "any",
        "value": "O'Reilly",
        "key": "test_publisher"
      },
      {
        "type": "any",
        "value": "Flask101",
        "key": "test_name"
      },
      {
        "type": "any",
        "value": "2025-01-01",
        "key": "test_date"
      },
      {
        "type": "any",
        "value": "49.99",
        "key": "test_cost"
      }
    ],
    "info": {
      "_postman_id": "book-crud-api-comprehensive",
      "name": "Book CRUD API - Comprehensive Test Collection",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Postman collection that implements the requested test plan (Sections 1-9).\n\nBase URL is set via the environment variable {{base_url}} (default: http://127.0.0.1:5000).\n\nNotes:\n- Some test cases require environment/system changes (e.g., stopping PostgreSQL). For those tests the request contains a failing assertion with a helpful message if the environment is not prepared.\n- CORS checks and server-start checks are partially verified here (CORS header presence, /health status).\n- For DB-down or disk-full scenarios you must simulate the condition (stop DB or change DB config) before running the request.\n\nImported from: Flasgger API spec provided by user.\nGenerated: 2025-10-09T11:59:12.701572Z",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-10-09T00:00:00Z",
      "postman_exported_using": "ChatGPT"
    },
    "id": "book-crud-env",
    "name": "Book CRUD API Environment",
    "values": [
      {
        "type": "any",
        "value": "http://127.0.0.1:5000",
        "key": "base_url"
      },
      {
        "type": "any",
        "value": "",
        "key": "created_book_id"
      },
      {
        "type": "any",
        "value": "999999",
        "key": "non_existing_id"
      },
      {
        "type": "any",
        "value": "O'Reilly",
        "key": "test_publisher"
      },
      {
        "type": "any",
        "value": "Flask101",
        "key": "test_name"
      },
      {
        "type": "any",
        "value": "2025-01-01",
        "key": "test_date"
      },
      {
        "type": "any",
        "value": "49.99",
        "key": "test_cost"
      }
    ]
  },
  "globals": {
    "id": "858c746d-7a9d-48c7-ab52-436a36a62f79",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 33,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 34,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 33,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 33,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 33,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 58,
        "pending": 0,
        "failed": 21
      },
      "testScripts": {
        "total": 33,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 135.57575757575754,
      "responseMin": 11,
      "responseMax": 334,
      "responseSd": 120.8833723691359,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1760368760161,
      "completed": 1760368771297
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 33,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "950c01eb-55a2-4121-8f0a-c6b5fe723b1e",
          "httpRequestId": "ba90c772-48dc-4a35-9b24-68067fd4c219"
        },
        "item": {
          "id": "ba3e9646-11db-40b8-aba2-ae5fe4bd5fff",
          "name": "Server Start Check (root) - verify server responds",
          "request": {
            "description": {
              "content": "Check that the server responds at the base URL. If Flask is not started this will fail to connect.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "76bcabd5-ca3c-4d1f-8b33-54772bb3a422",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Server responds (any 2xx or 3xx)', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201,202,203,204,301,302,304]);",
                  "});",
                  "",
                  "pm.test('Content-Type is application/json when present', function () {",
                  "    if (pm.response.headers.has('Content-Type')) {",
                  "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "    } else {",
                  "        pm.skip('No Content-Type header present');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "c3199d8b-e350-4726-9ff5-8c6e9b274fbf"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Check that the server responds at the base URL. If Flask is not started this will fail to connect.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              ""
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7eb273f5-a685-4265-8b48-67427c15db8d",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "551ae242-c886-4aae-b962-87817fc960da",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:20 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "6573"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              48,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              48,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              10,
              93,
              10
            ]
          },
          "cookie": [],
          "responseTime": 322,
          "responseSize": 6573
        },
        "id": "ba3e9646-11db-40b8-aba2-ae5fe4bd5fff",
        "assertions": [
          {
            "assertion": "Server responds (any 2xx or 3xx)",
            "skipped": false
          },
          {
            "assertion": "Content-Type is application/json when present",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ec96b23c-7345-4d7b-9192-ab0d4f6dde93",
          "length": 33,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7f557c58-3998-4e96-ad31-392d5102ba66"
        },
        "item": {
          "id": "3464d6c2-60bf-4f96-bdea-60b7bff2a7e5",
          "name": "CORS check - looks for Access-Control-Allow-Origin header",
          "request": {
            "description": {
              "content": "Sends Origin header and checks for Access-Control-Allow-Origin in response headers.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Origin",
                "value": "http://example.com"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "43ed3862-7fa6-4c69-b02e-650574cc35ed",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Health endpoint returns 200 or 503', function () {",
                  "    pm.expect([200,503]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('CORS header present (Access-Control-Allow-Origin)', function () {",
                  "    if (pm.response.headers.has('Access-Control-Allow-Origin')) {",
                  "        pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.be.a('string');",
                  "    } else {",
                  "        pm.fail('CORS header Access-Control-Allow-Origin not present â€” ensure CORS is enabled on server');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "dce0984a-4f78-4b12-8e51-4c7660365697"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Sends Origin header and checks for Access-Control-Allow-Origin in response headers.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "health"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Origin",
              "value": "http://example.com"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "af3c1d6d-91dd-41f5-8d14-211c630204a0",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4a8aa5f7-1dce-49da-8b0e-b0736a299e08",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:21 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "http://example.com"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              32,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 238,
          "responseSize": 26
        },
        "id": "3464d6c2-60bf-4f96-bdea-60b7bff2a7e5",
        "assertions": [
          {
            "assertion": "Health endpoint returns 200 or 503",
            "skipped": false
          },
          {
            "assertion": "CORS header present (Access-Control-Allow-Origin)",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5a8f409d-e646-42ee-8a23-6e73a8ec7260",
          "length": 33,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3c26b8b4-9462-4217-8975-4a89e3cda40a"
        },
        "item": {
          "id": "610bc6ca-27b3-48f0-bfdd-76fb76e7bbb2",
          "name": "Health check - healthy DB (expect 200)",
          "request": {
            "description": {
              "content": "Expect 200 and JSON {status: 'healthy'} when DB is up.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "de8531ef-c61d-46ae-ad90-5f2d92e26384",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200 OK', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Response is JSON and contains status field', function () {",
                  "    pm.response.to.have.header('Content-Type');",
                  "    var json = {};",
                  "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response is not JSON'); }",
                  "    pm.expect(json).to.have.property('status');",
                  "    pm.expect(json.status).to.be.oneOf(['healthy','ok','Healthy','OK']);",
                  "});"
                ],
                "_lastExecutionId": "ec331470-300b-488b-8cef-0aa7b09e30b9"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Expect 200 and JSON {status: 'healthy'} when DB is up.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "health"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9404685e-3b42-41ac-a950-e74a81469cfd",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d5c250f4-6112-4fa5-a68b-52f2a79dfe3d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:21 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              32,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 258,
          "responseSize": 26
        },
        "id": "610bc6ca-27b3-48f0-bfdd-76fb76e7bbb2",
        "assertions": [
          {
            "assertion": "Status is 200 OK",
            "skipped": false
          },
          {
            "assertion": "Response is JSON and contains status field",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e160e897-c7f5-4184-ad8c-94b618a80d1e",
          "length": 33,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b61fc6b8-1b75-4758-b91d-c5e301017f8c"
        },
        "item": {
          "id": "25d92d13-917a-45b4-b3a3-dee1256c2697",
          "name": "Health check - DB down (must simulate by stopping DB before running)",
          "request": {
            "description": {
              "content": "Simulate DB down by stopping PostgreSQL. This test expects HTTP 503. If DB is up the test will fail with an instructive message.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e19209fc-7e44-4f7d-9a34-5e76924ab8f9",
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 503) {",
                  "    pm.test('DB down - returned 503 as expected', function () { pm.expect(pm.response.code).to.equal(503); });",
                  "} else {",
                  "    pm.test('DB down test not executed - DB appears up', function () {",
                  "        pm.expect.fail('Database is up. To validate this test, stop PostgreSQL and re-run this request. Received status: ' + pm.response.code);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "949c406b-6d84-4634-8297-511065e51e3b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Simulate DB down by stopping PostgreSQL. This test expects HTTP 503. If DB is up the test will fail with an instructive message.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "health"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5b4d07b3-8ee6-4a9e-97ea-55c86915cc42",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "35ec7da0-14a7-4210-9a64-870b76acbf2a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:22 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              32,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 304,
          "responseSize": 26
        },
        "id": "25d92d13-917a-45b4-b3a3-dee1256c2697",
        "assertions": [
          {
            "assertion": "DB down test not executed - DB appears up",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "DB down test not executed - DB appears up",
              "message": "Database is up. To validate this test, stop PostgreSQL and re-run this request. Received status: 200",
              "stack": "AssertionError: Database is up. To validate this test, stop PostgreSQL and re-run this request. Received status: 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "fa3d46b0-53fd-44a5-9f25-2daf2d01d7b7",
          "length": 33,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "45f544d1-2785-40a1-8eb5-237977d80059"
        },
        "item": {
          "id": "6b4b6853-f11b-466f-8d7b-891b301109de",
          "name": "Fetch all books - expect JSON array (200)",
          "request": {
            "description": {
              "content": "Retrieve all books. When DB has data returns array of objects, when empty returns [].",
              "type": "text/plain"
            },
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "661b485e-097d-4039-bb2b-6a2bcfc982b8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.expect(pm.response.code).to.equal(200); });",
                  "pm.test('Response is JSON array', function () {",
                  "    var json = [];",
                  "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                  "    pm.expect(json).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "6c0362a1-47b0-4a86-9745-9136f4d7e9c1"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Retrieve all books. When DB has data returns array of objects, when empty returns [].",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              ""
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "508f21f7-ab12-476d-9210-86b30ce71bdc",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ade9931c-81ba-40b1-a066-24c84806208e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:22 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "6573"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              48,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              48,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              10,
              93,
              10
            ]
          },
          "cookie": [],
          "responseTime": 334,
          "responseSize": 6573
        },
        "id": "6b4b6853-f11b-466f-8d7b-891b301109de",
        "assertions": [
          {
            "assertion": "Status 200",
            "skipped": false
          },
          {
            "assertion": "Response is JSON array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d198c436-d04a-4e3b-b952-af7ec17f04bd",
          "length": 33,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7297b79c-a55a-4b0e-9a4d-325bc54931c7"
        },
        "item": {
          "id": "49bb763c-6910-46c6-88f6-d2b090989af5",
          "name": "Fetch all books - empty DB (manual prepare: truncate book table)",
          "request": {
            "description": {
              "content": "Before running this request manually truncate the book table. Expect [] and 200 OK.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eaffc7df-6bff-498a-90a2-c0ad003e5e72",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.expect(pm.response.code).to.equal(200); });",
                  "pm.test('Response is JSON array (possibly empty)', function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json).to.be.an('array');",
                  "    pm.test('Array empty as requested', function () {",
                  "        // This will fail if DB wasn't truncated - instruct user to truncate if not empty",
                  "        if (json.length !== 0) { pm.expect.fail('DB not empty. To validate this test truncate the book table before running.'); }",
                  "    });",
                  "});"
                ],
                "_lastExecutionId": "4a7a37f9-39ca-4318-91a8-99142ed2d9f5"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Before running this request manually truncate the book table. Expect [] and 200 OK.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              ""
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8f2bf5a4-616e-4dd8-86ee-71d56739b3ef",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "686035db-07ac-4131-966b-0657b62fae05",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:23 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "6573"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              48,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              48,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              10,
              93,
              10
            ]
          },
          "cookie": [],
          "responseTime": 306,
          "responseSize": 6573
        },
        "id": "49bb763c-6910-46c6-88f6-d2b090989af5",
        "assertions": [
          {
            "assertion": "Status 200",
            "skipped": false
          },
          {
            "assertion": "Array empty as requested",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Array empty as requested",
              "message": "DB not empty. To validate this test truncate the book table before running.",
              "stack": "AssertionError: DB not empty. To validate this test truncate the book table before running.\n   at Object.eval sandbox-script.js:3:6)"
            }
          },
          {
            "assertion": "Response is JSON array (possibly empty)",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c347d12a-804a-41a7-9e49-a72bbd98948d",
          "length": 33,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "47ab54c3-08d7-4795-b046-b353e1e454bb"
        },
        "item": {
          "id": "fdf690fe-8ef2-4d08-9ea3-af8c1cd92868",
          "name": "Create - Valid book (positive)",
          "request": {
            "description": {
              "content": "Creates a valid book. Stores created id into {{created_book_id}} for later use (if response returns id).",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101\", \"date\": \"2025-01-01\", \"Cost\": 49.99}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3763ce0f-d1dc-4f27-891f-d99502c51664",
                "type": "text/javascript",
                "exec": [
                  "// No pre-req"
                ],
                "_lastExecutionId": "cb5e7dcd-4850-4120-8369-c6c7a2292f39"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d6e71fc4-267e-4878-91ba-ae34cc9c82a6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201 Created', function () {",
                  "    pm.expect(pm.response.code).to.equal(201);",
                  "});",
                  "",
                  "pm.test('Response is JSON and echoes fields', function () {",
                  "    var json = {};",
                  "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                  "    pm.expect(json).to.have.property('publisher');",
                  "    pm.expect(json).to.have.property('name');",
                  "    pm.expect(json).to.have.property('date');",
                  "    pm.expect(json).to.have.property('Cost');",
                  "});",
                  "",
                  "// If server returns an id, save it to an environment variable for subsequent tests",
                  "try {",
                  "    var j = pm.response.json();",
                  "    if (j.id) { pm.environment.set('created_book_id', j.id); }",
                  "} catch(e) {}"
                ],
                "_lastExecutionId": "5aabef3f-9b05-4e8c-b8ab-b083464c318d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Creates a valid book. Stores created id into  for later use (if response returns id).",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "create"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "94d77dae-23e0-4857-9a8d-8736603b7851",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "82",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101\", \"date\": \"2025-01-01\", \"Cost\": 49.99}"
          }
        },
        "response": {
          "id": "6776e824-d3a8-4637-bef7-a5dbf96d44eb",
          "status": "CREATED",
          "code": 201,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:24 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "159"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              67,
              111,
              115,
              116,
              34,
              58,
              32,
              52,
              57,
              46,
              57,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              32,
              34,
              66,
              111,
              111,
              107,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 226,
          "responseSize": 159
        },
        "id": "fdf690fe-8ef2-4d08-9ea3-af8c1cd92868",
        "assertions": [
          {
            "assertion": "Status is 201 Created",
            "skipped": false
          },
          {
            "assertion": "Response is JSON and echoes fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is JSON and echoes fields",
              "message": "expected { data: { Cost: 49.99, â€¦(3) }, â€¦(1) } to have property 'publisher'",
              "stack": "AssertionError: expected { data: { Cost: 49.99, â€¦(3) }, â€¦(1) } to have property 'publisher'\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b8b7a454-ad0c-4b08-a6cb-a326300d6196",
          "length": 33,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f2f5e53e-f1f7-478b-a6d5-fa74b79f09d7"
        },
        "item": {
          "id": "263c3409-2fde-424c-bb88-c2ace30df9af",
          "name": "Create - Missing required field (publisher)",
          "request": {
            "description": {
              "content": "Omit publisher field. Expect 400 with error message about missing field.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\": \"Flask101\", \"date\": \"2025-01-01\", \"Cost\": 49.99}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "27cff61d-1d9b-4a4d-8139-f481f745248e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 400 Bad Request', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "pm.test('Error mentions missing publisher', function () {",
                  "    var json = {};",
                  "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                  "    pm.expect(JSON.stringify(json).toLowerCase()).to.include('publisher');",
                  "});"
                ],
                "_lastExecutionId": "0c5a2a77-1a7a-45bf-9a86-3f11850bfe16"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Omit publisher field. Expect 400 with error message about missing field.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "create"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "35735a4f-b5a6-44b1-a351-f6028d7285be",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "57",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"name\": \"Flask101\", \"date\": \"2025-01-01\", \"Cost\": 49.99}"
          }
        },
        "response": {
          "id": "2c9c9c7d-7b71-41bd-b8d9-64e2f08ffbe1",
          "status": "BAD REQUEST",
          "code": 400,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:24 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "42"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              77,
              105,
              115,
              115,
              105,
              110,
              103,
              32,
              102,
              105,
              101,
              108,
              100,
              58,
              32,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 41,
          "responseSize": 42
        },
        "id": "263c3409-2fde-424c-bb88-c2ace30df9af",
        "assertions": [
          {
            "assertion": "Status is 400 Bad Request",
            "skipped": false
          },
          {
            "assertion": "Error mentions missing publisher",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d07b9976-2f40-48c0-b719-c283d4ea9427",
          "length": 33,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "38fae1d2-e824-41f1-9a74-9cbf9670fabc"
        },
        "item": {
          "id": "e1942855-0b06-493a-bd11-f34c2a776843",
          "name": "Create - Invalid cost type",
          "request": {
            "description": {
              "content": "Cost as string should validate and return 400.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"Packt\", \"name\": \"Flask\", \"date\": \"2025-01-01\", \"Cost\": \"abc\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bfc69a22-aa5b-47aa-8b94-430b60c22b31",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 400 for invalid cost', function () { pm.expect(pm.response.code).to.equal(400); });",
                  "pm.test('Error mentions cost or numeric', function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(JSON.stringify(json).toLowerCase()).to.satisfy(function(s) {",
                  "        return s.includes('cost') || s.includes('numeric') || s.includes('invalid');",
                  "    });",
                  "});"
                ],
                "_lastExecutionId": "2dcc29d1-6dac-44fb-8e32-b9b2f1fac982"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Cost as string should validate and return 400.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "create"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "83afffaf-fae5-4ccc-a374-8b252031f542",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "76",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"publisher\": \"Packt\", \"name\": \"Flask\", \"date\": \"2025-01-01\", \"Cost\": \"abc\"}"
          }
        },
        "response": {
          "id": "35c67ad8-9304-4832-aeec-588bfb7b3904",
          "status": "BAD REQUEST",
          "code": 400,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:24 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "56"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              115,
              116,
              46,
              32,
              77,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              97,
              32,
              110,
              117,
              109,
              101,
              114,
              105,
              99,
              32,
              118,
              97,
              108,
              117,
              101,
              46,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 33,
          "responseSize": 56
        },
        "id": "e1942855-0b06-493a-bd11-f34c2a776843",
        "assertions": [
          {
            "assertion": "Status 400 for invalid cost",
            "skipped": false
          },
          {
            "assertion": "Error mentions cost or numeric",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b2b96891-fe3a-48bb-a10b-42c698bae8c1",
          "length": 33,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3b61d09c-10c6-4e98-b09d-14470c27f25b"
        },
        "item": {
          "id": "ee540b41-bccc-4173-bc1a-f0355153d757",
          "name": "Create - Invalid date format",
          "request": {
            "description": {
              "content": "Invalid date format should return a 400 and helpful error.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"Packt\", \"name\": \"Flask\", \"date\": \"32-13-2025\", \"Cost\": 39.99}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ec1be176-8e1b-46b3-a34d-ae38d61fb1da",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 400 for invalid date format', function () { pm.expect(pm.response.code).to.equal(400); });",
                  "pm.test('Error mentions date format', function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(JSON.stringify(json).toLowerCase()).to.include('date');",
                  "});"
                ],
                "_lastExecutionId": "058fee17-84e9-41de-a295-781241dfaf93"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Invalid date format should return a 400 and helpful error.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "create"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dd1ad70f-9bd7-41e2-a895-515271cd0522",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "76",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"publisher\": \"Packt\", \"name\": \"Flask\", \"date\": \"32-13-2025\", \"Cost\": 39.99}"
          }
        },
        "response": {
          "id": "6696c816-d901-46a4-bd7f-b9933f0ff33a",
          "status": "BAD REQUEST",
          "code": 400,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:24 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "54"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              100,
              97,
              116,
              101,
              32,
              102,
              111,
              114,
              109,
              97,
              116,
              46,
              32,
              85,
              115,
              101,
              32,
              89,
              89,
              89,
              89,
              45,
              77,
              77,
              45,
              68,
              68,
              46,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 50,
          "responseSize": 54
        },
        "id": "ee540b41-bccc-4173-bc1a-f0355153d757",
        "assertions": [
          {
            "assertion": "Expect 400 for invalid date format",
            "skipped": false
          },
          {
            "assertion": "Error mentions date format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6643ed9a-136d-403d-81f9-759352c19a01",
          "length": 33,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "730d8ce4-9aea-4c5d-9cab-c533fb053baa"
        },
        "item": {
          "id": "1416723a-716c-43cc-9298-0a6dccc2f75e",
          "name": "Create - Empty body",
          "request": {
            "description": {
              "content": "Empty JSON should return 400 with missing body message.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3943a1d-3a4c-4ed7-8f94-8e6b636f8be8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 400 for empty body', function () { pm.expect(pm.response.code).to.equal(400); });",
                  "pm.test('Error mentions missing body', function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(JSON.stringify(json).toLowerCase()).to.include('body');",
                  "});"
                ],
                "_lastExecutionId": "54d33be2-f1e2-4c15-8850-8a1946fd1123"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Empty JSON should return 400 with missing body message.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "create"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0ff0c9a5-c67c-4273-907f-ecaad18162ac",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "2",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{}"
          }
        },
        "response": {
          "id": "2597f5fe-04e5-443a-b5da-f067f3f3edb3",
          "status": "BAD REQUEST",
          "code": 400,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:25 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "38"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              77,
              105,
              115,
              115,
              105,
              110,
              103,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              98,
              111,
              100,
              121,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 38,
          "responseSize": 38
        },
        "id": "1416723a-716c-43cc-9298-0a6dccc2f75e",
        "assertions": [
          {
            "assertion": "Expect 400 for empty body",
            "skipped": false
          },
          {
            "assertion": "Error mentions missing body",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "62cc8217-cdcd-4902-8843-7c6ac5cfc4ab",
          "length": 33,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a1503892-e7ca-4ad0-a70d-6f1bc1afae3f"
        },
        "item": {
          "id": "992dea20-fee8-44a6-942c-ed98e83edacb",
          "name": "Create - Missing JSON header (send raw text)",
          "request": {
            "description": {
              "content": "If server enforces JSON header this should return 400 with request must be JSON.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "hello"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15873d5d-91b5-415e-81a0-24f608621ec1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 400 when content-type not application/json', function () { pm.expect(pm.response.code).to.equal(400); });",
                  "pm.test('Error mentions JSON', function () {",
                  "    var txt = pm.response.text();",
                  "    pm.expect(txt.toLowerCase()).to.include('json');",
                  "});"
                ],
                "_lastExecutionId": "7067fb22-588a-4d46-af1c-66c91a8d4fd1"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "If server enforces JSON header this should return 400 with request must be JSON.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "create"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "99f5f057-cda7-48f9-8379-103e1a04faa2",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "5",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "hello"
          }
        },
        "response": {
          "id": "a1386680-73a2-4652-99c0-c5a2acc8d796",
          "status": "BAD REQUEST",
          "code": 400,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:25 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "38"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              74,
              83,
              79,
              78,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 21,
          "responseSize": 38
        },
        "id": "992dea20-fee8-44a6-942c-ed98e83edacb",
        "assertions": [
          {
            "assertion": "Expect 400 when content-type not application/json",
            "skipped": false
          },
          {
            "assertion": "Error mentions JSON",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1832b734-6f9b-418f-943d-adcecbfa5e14",
          "length": 33,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8b4088d9-011a-4484-b359-d65e0b6a4622"
        },
        "item": {
          "id": "4c7937d1-7c53-4943-b911-6ece760aa326",
          "name": "Create - Extra fields (author) - server may ignore or accept",
          "request": {
            "description": {
              "content": "Extra fields may be ignored or written depending on schema. Accept either 201 or 200 with success.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"Packt\", \"name\": \"Flask\", \"date\": \"2025-01-01\", \"Cost\": 39.99, \"author\": \"xyz\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4141936f-3dab-4fce-af3a-ce6167770dda",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 201 (created) or 200 (accepted) or 400 if validation fails', function () {",
                  "    pm.expect([200,201,400]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('If created, response includes the extra field or ignores it', function () {",
                  "    try { var j = pm.response.json(); if (pm.response.code===201 || pm.response.code===200) {",
                  "        // optional check",
                  "        if (j.author) { pm.expect(j.author).to.equal('xyz'); }",
                  "    } } catch(e) {}",
                  "});"
                ],
                "_lastExecutionId": "5932b961-f432-4644-80c2-678270bd31aa"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Extra fields may be ignored or written depending on schema. Accept either 201 or 200 with success.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "create"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "549ab78f-4a66-479d-9faf-6c2737cc3b69",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "93",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"publisher\": \"Packt\", \"name\": \"Flask\", \"date\": \"2025-01-01\", \"Cost\": 39.99, \"author\": \"xyz\"}"
          }
        },
        "response": {
          "id": "79f657a0-79fb-4df2-bba0-0ee1dc8fc794",
          "status": "CREATED",
          "code": 201,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:25 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "174"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              67,
              111,
              115,
              116,
              34,
              58,
              32,
              51,
              57,
              46,
              57,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              117,
              116,
              104,
              111,
              114,
              34,
              58,
              32,
              34,
              120,
              121,
              122,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              32,
              34,
              66,
              111,
              111,
              107,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 134,
          "responseSize": 174
        },
        "id": "4c7937d1-7c53-4943-b911-6ece760aa326",
        "assertions": [
          {
            "assertion": "Expect 201 (created) or 200 (accepted) or 400 if validation fails",
            "skipped": false
          },
          {
            "assertion": "If created, response includes the extra field or ignores it",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d70f6625-aab7-4e9a-ae72-4e3d3d9ff3ec",
          "length": 33,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d8cca146-c517-402e-b8e4-e822f6765b5c"
        },
        "item": {
          "id": "a479ad6a-274c-4b80-bc19-6acbe56b9e80",
          "name": "Create - Database constraint violation (duplicate name) - make name unique in DB before running",
          "request": {
            "description": {
              "content": "To validate constraint violation, make the 'name' column unique and insert a duplicate. Expects 400 with constraint error.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"Packt\", \"name\": \"FLASK_DUPLICATE_TEST\", \"date\": \"2025-01-01\", \"Cost\": 39.99}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f8182023-0436-4f0b-b4a3-18408e87bc47",
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 400) {",
                  "    pm.test('Constraint violation reported', function () {",
                  "        var j = pm.response.json();",
                  "        pm.expect(JSON.stringify(j).toLowerCase()).to.satisfy(function(s){ return s.includes('constraint') || s.includes('duplicate') || s.includes('unique'); });",
                  "    });",
                  "} else {",
                  "    pm.test('DB constraint test not validated', function () { pm.expect.fail('Server did not return 400. Ensure DB uniqueness constraint is applied and re-run. Received: ' + pm.response.code); });",
                  "}"
                ],
                "_lastExecutionId": "b8178430-9747-446f-92b4-d9ceac616d63"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "To validate constraint violation, make the 'name' column unique and insert a duplicate. Expects 400 with constraint error.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "create"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e6478948-854f-4b4b-a78f-5fe5883cfca9",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "91",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"publisher\": \"Packt\", \"name\": \"FLASK_DUPLICATE_TEST\", \"date\": \"2025-01-01\", \"Cost\": 39.99}"
          }
        },
        "response": {
          "id": "b45b3da8-4d8b-48ec-a8f3-5f9904152171",
          "status": "CREATED",
          "code": 201,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:26 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "168"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              67,
              111,
              115,
              116,
              34,
              58,
              32,
              51,
              57,
              46,
              57,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              32,
              34,
              66,
              111,
              111,
              107,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 232,
          "responseSize": 168
        },
        "id": "a479ad6a-274c-4b80-bc19-6acbe56b9e80",
        "assertions": [
          {
            "assertion": "DB constraint test not validated",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "DB constraint test not validated",
              "message": "Server did not return 400. Ensure DB uniqueness constraint is applied and re-run. Received: 201",
              "stack": "AssertionError: Server did not return 400. Ensure DB uniqueness constraint is applied and re-run. Received: 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "27b7a915-b9c8-4e22-8e8d-6e78ad49d742",
          "length": 33,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "beb0105e-89fe-41d4-a091-494e92f0bfbc"
        },
        "item": {
          "id": "a66e53e7-a49d-4a70-87f0-fb46153d7cdc",
          "name": "Update - Valid update existing record (uses {{created_book_id}})",
          "request": {
            "description": {
              "content": "Update the previously created book. Ensure {{created_book_id}} is set by the Create positive test.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "update",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101-Updated\", \"date\": \"2025-02-02\", \"Cost\": 59.99}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
                "type": "text/javascript",
                "exec": [
                  "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                  "pm.test('Expect 200 OK for successful update', function() { pm.expect(pm.response.code).to.equal(200); });",
                  "pm.test('Response mentions updated', function() { var txt = pm.response.text(); pm.expect(txt.toLowerCase()).to.include('update'); });"
                ],
                "_lastExecutionId": "7c614590-1cb8-4c23-87e7-279db420cd4a"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Update the previously created book. Ensure  is set by the Create positive test.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "update",
              ""
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "61c2e998-ad1c-486d-a138-3aa2ed3a6f38",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "90",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101-Updated\", \"date\": \"2025-02-02\", \"Cost\": 59.99}"
          }
        },
        "response": {
          "id": "70c5bf5a-3fa5-454b-9c3c-8caee7eeb5c9",
          "status": "NOT FOUND",
          "code": 404,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:26 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "36"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 23,
          "responseSize": 36
        },
        "id": "a66e53e7-a49d-4a70-87f0-fb46153d7cdc",
        "assertions": [
          {
            "assertion": "Missing created_book_id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Missing created_book_id",
              "message": "created_book_id not set. Run Create (positive) first.",
              "stack": "AssertionError: created_book_id not set. Run Create (positive) first.\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Expect 200 OK for successful update",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Expect 200 OK for successful update",
              "message": "expected 404 to equal 200",
              "stack": "AssertionError: expected 404 to equal 200\n   at Object.eval sandbox-script.js:2:15)"
            }
          },
          {
            "assertion": "Response mentions updated",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response mentions updated",
              "message": "expected '{\\n  \"error\": \"resource not found\"\\n}â€¦' to include 'update'",
              "stack": "AssertionError: expected '{\\n  \"error\": \"resource not found\"\\n}â€¦' to include 'update'\n   at Object.eval sandbox-script.js:3:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0d6dc6e5-7339-4c21-b4b6-d4046642366b",
          "length": 33,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "dd021cd7-e2d7-4342-b38c-7d0c5ed53371"
        },
        "item": {
          "id": "6329c6d5-2ff1-4c18-9af7-b1a72ec6eb2d",
          "name": "Update - Non-existing ID",
          "request": {
            "description": {
              "content": "Update a non-existing ID. Expected 404 with Book not found.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "update",
                "{{non_existing_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"Packt\", \"name\": \"NoSuchBook\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "57961c8e-8e30-45fa-9609-115718e06da3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 404 Not Found for non-existing ID', function() { pm.expect(pm.response.code).to.equal(404); });",
                  "pm.test('Response mentions not found', function() { var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('not found'); });"
                ],
                "_lastExecutionId": "151541ba-dfe0-4cb5-a17a-4a5ebb8f08cf"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Update a non-existing ID. Expected 404 with Book not found.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "update",
              "999999"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8152dd98-0fb0-4bad-b570-c9b405b16d21",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "81",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\"publisher\": \"Packt\", \"name\": \"NoSuchBook\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
          }
        },
        "response": {
          "id": "95bdc9c1-8faf-4663-b663-563cb15aaa39",
          "status": "NOT FOUND",
          "code": 404,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:26 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              66,
              111,
              111,
              107,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 282,
          "responseSize": 32
        },
        "id": "6329c6d5-2ff1-4c18-9af7-b1a72ec6eb2d",
        "assertions": [
          {
            "assertion": "Expect 404 Not Found for non-existing ID",
            "skipped": false
          },
          {
            "assertion": "Response mentions not found",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "290a164e-ca2b-45a6-a69a-36f44aa77f28",
          "length": 33,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d7ecba53-e212-46d8-9c59-a71d669e0fe4"
        },
        "item": {
          "id": "3dc9892e-b497-4788-866d-acabfc0d3d6d",
          "name": "Update - Invalid ID format (abc)",
          "request": {
            "description": {
              "content": "Invalid ID format should hit Flask routing mismatch and return 404.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "update",
                "abc"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"Packt\", \"name\": \"InvalidIDTest\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bee0c1b5-6d66-43a7-b7f3-1e9e5bd64134",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 404 for invalid ID format', function() { pm.expect(pm.response.code).to.equal(404); });"
                ],
                "_lastExecutionId": "6af184a9-8308-4426-b1e3-09a26e3645d8"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Invalid ID format should hit Flask routing mismatch and return 404.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "update",
              "abc"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "26f53aa6-0390-446c-a38d-7f0b3404b619",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "84",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\"publisher\": \"Packt\", \"name\": \"InvalidIDTest\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
          }
        },
        "response": {
          "id": "a62dc0db-8075-476c-bd08-7723d8af950f",
          "status": "NOT FOUND",
          "code": 404,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:26 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "36"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 36
        },
        "id": "3dc9892e-b497-4788-866d-acabfc0d3d6d",
        "assertions": [
          {
            "assertion": "Expect 404 for invalid ID format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "12c4608d-628f-4279-9541-8813a8f8d6ad",
          "length": 33,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "03abaaa4-7d85-4b25-8dbb-83b3755d45b1"
        },
        "item": {
          "id": "c76208b2-ae07-4057-b10c-3e1037ff9180",
          "name": "Update - Missing field in update (publisher)",
          "request": {
            "description": {
              "content": "Update with missing required field. Expect 400 with missing publisher error.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "update",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"name\": \"FlaskPro\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b3fabf6f-c3cb-4a03-aaa6-7973f55b6b14",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 400 when required publisher missing', function(){ pm.expect(pm.response.code).to.equal(400); });",
                  "pm.test('Error mentions publisher', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); } catch(e) { j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('publisher'); });"
                ],
                "_lastExecutionId": "d19cec5d-da61-4fac-95b9-37b939db5156"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Update with missing required field. Expect 400 with missing publisher error.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "update",
              ""
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b86c62e7-7522-4482-bf62-2fe4da996c50",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "20",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\"name\": \"FlaskPro\"}"
          }
        },
        "response": {
          "id": "398b5ce4-0d42-43a8-9d09-527f94892794",
          "status": "NOT FOUND",
          "code": 404,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:27 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "36"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 36
        },
        "id": "c76208b2-ae07-4057-b10c-3e1037ff9180",
        "assertions": [
          {
            "assertion": "Expect 400 when required publisher missing",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Expect 400 when required publisher missing",
              "message": "expected 404 to equal 400",
              "stack": "AssertionError: expected 404 to equal 400\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "Error mentions publisher",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Error mentions publisher",
              "message": "expected '{\"error\":\"resource not found\"}' to include 'publisher'",
              "stack": "AssertionError: expected '{\"error\":\"resource not found\"}' to include 'publisher'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "db5cdfe7-8718-4513-8447-d44a294dc2f2",
          "length": 33,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d8f1758d-4c7f-4bbe-ab5f-b0040f0bef2e"
        },
        "item": {
          "id": "d02f5261-44a0-40e3-a0cb-d7efd81b0bc8",
          "name": "Update - Invalid date in update",
          "request": {
            "description": {
              "content": "Invalid date should return 400.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "update",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"Packt\", \"name\": \"FlaskBadDate\", \"date\": \"31-02-2025\", \"Cost\": 25.0}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8490355f-96f9-4b5b-b11d-697affe0bccc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 400 for invalid date', function(){ pm.expect(pm.response.code).to.equal(400); });",
                  "pm.test('Error mentions date', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('date'); });"
                ],
                "_lastExecutionId": "fc17e9b0-c9b5-41fe-9078-0093b79f66ea"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Invalid date should return 400.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "update",
              ""
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b8248d55-7fea-4768-aacb-f74909743b87",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "82",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\"publisher\": \"Packt\", \"name\": \"FlaskBadDate\", \"date\": \"31-02-2025\", \"Cost\": 25.0}"
          }
        },
        "response": {
          "id": "61ac235f-cf5b-46eb-a9a0-8749ceae5e31",
          "status": "NOT FOUND",
          "code": 404,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:27 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "36"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 36
        },
        "id": "d02f5261-44a0-40e3-a0cb-d7efd81b0bc8",
        "assertions": [
          {
            "assertion": "Expect 400 for invalid date",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Expect 400 for invalid date",
              "message": "expected 404 to equal 400",
              "stack": "AssertionError: expected 404 to equal 400\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "Error mentions date",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Error mentions date",
              "message": "expected '{\"error\":\"resource not found\"}' to include 'date'",
              "stack": "AssertionError: expected '{\"error\":\"resource not found\"}' to include 'date'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3f5b2a25-49ae-4b27-b678-43435fdefdcc",
          "length": 33,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4d44b5ae-87f5-4e9f-bbd6-6024ca335006"
        },
        "item": {
          "id": "702f6f52-eed5-4661-828d-9f320d19efc9",
          "name": "Update - DB down during update (stop DB before running)",
          "request": {
            "description": {
              "content": "Stop DB before running. Expects 503. If DB is up test fails with guidance.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "update",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"Packt\", \"name\": \"WhileDBDown\", \"date\": \"2025-01-01\", \"Cost\": 1.0}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "51102f7c-d844-4d3a-bd41-30df64d41c45",
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                  "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                ],
                "_lastExecutionId": "d562783c-1742-45ab-ac03-0732f1332a75"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Stop DB before running. Expects 503. If DB is up test fails with guidance.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "update",
              ""
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4d84ca0a-2e49-45a6-83af-d189f2b25ec7",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "80",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\"publisher\": \"Packt\", \"name\": \"WhileDBDown\", \"date\": \"2025-01-01\", \"Cost\": 1.0}"
          }
        },
        "response": {
          "id": "0723fd11-33d5-4682-ad4e-d34d0ddd57d4",
          "status": "NOT FOUND",
          "code": 404,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:27 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "36"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 36
        },
        "id": "702f6f52-eed5-4661-828d-9f320d19efc9",
        "assertions": [
          {
            "assertion": "DB down test not executed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "DB down test not executed",
              "message": "Database is up. Stop PostgreSQL and re-run request to validate 503. Got: 404",
              "stack": "AssertionError: Database is up. Stop PostgreSQL and re-run request to validate 503. Got: 404\n   at Object.eval sandbox-script.js:1:20)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4aec2e38-7140-4037-a97b-30d4446ffd55",
          "length": 33,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "30589b96-d9fd-46b1-8e27-f88200414653"
        },
        "item": {
          "id": "a0cf52f2-cd25-48c1-b9db-57b72fc9303c",
          "name": "Delete - Valid book (uses {{created_book_id}})",
          "request": {
            "description": {
              "content": "Delete the book created earlier. Ensure created_book_id is set.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "delete",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aded9cc9-b8e5-4025-8da5-839a27ad9d84",
                "type": "text/javascript",
                "exec": [
                  "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                  "pm.test('Expect 200 OK for successful delete', function(){ pm.expect(pm.response.code).to.equal(200); });",
                  "pm.test('Response mentions deleted', function(){ pm.expect(pm.response.text().toLowerCase()).to.include('deleted'); });"
                ],
                "_lastExecutionId": "297d602f-96b2-4799-a9c5-a6cc9df52d2f"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Delete the book created earlier. Ensure created_book_id is set.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "delete",
              ""
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "74f271f0-736b-4e5c-858b-336b05ff764a",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "e3c0509a-0007-4278-a244-40f406f223ba",
          "status": "NOT FOUND",
          "code": 404,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:27 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "36"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 19,
          "responseSize": 36
        },
        "id": "a0cf52f2-cd25-48c1-b9db-57b72fc9303c",
        "assertions": [
          {
            "assertion": "Missing created_book_id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Missing created_book_id",
              "message": "created_book_id not set. Run Create (positive) first.",
              "stack": "AssertionError: created_book_id not set. Run Create (positive) first.\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "Expect 200 OK for successful delete",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Expect 200 OK for successful delete",
              "message": "expected 404 to equal 200",
              "stack": "AssertionError: expected 404 to equal 200\n   at Object.eval sandbox-script.js:2:21)"
            }
          },
          {
            "assertion": "Response mentions deleted",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response mentions deleted",
              "message": "expected '{\\n  \"error\": \"resource not found\"\\n}â€¦' to include 'deleted'",
              "stack": "AssertionError: expected '{\\n  \"error\": \"resource not found\"\\n}â€¦' to include 'deleted'\n   at Object.eval sandbox-script.js:3:21)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "12eb4ec6-1d77-441a-afb3-1564bb76acfc",
          "length": 33,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "94550e58-2356-4627-aa9d-9012e50def4f"
        },
        "item": {
          "id": "d32bb377-5b1f-4ba2-abca-8eb78c0218ba",
          "name": "Delete - Non-existing ID",
          "request": {
            "description": {
              "content": "Deleting a non-existing ID should return 404 and an error message.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "delete",
                "{{non_existing_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b98e8419-cd60-4dbb-9d98-c795c7339c35",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 404 for non-existing ID', function(){ pm.expect(pm.response.code).to.equal(404); });",
                  "pm.test('Response mentions not found', function(){ pm.expect(pm.response.text().toLowerCase()).to.include('not found'); });"
                ],
                "_lastExecutionId": "ad902a9a-3a5c-410f-94d0-f5d82df6bbbd"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Deleting a non-existing ID should return 404 and an error message.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "delete",
              "999999"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8d4f6db7-601c-47dc-a20d-678c4a051eb2",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "df778941-b2e6-4b41-b1c6-d9f2db24ac6b",
          "status": "NOT FOUND",
          "code": 404,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:28 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              66,
              111,
              111,
              107,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 277,
          "responseSize": 32
        },
        "id": "d32bb377-5b1f-4ba2-abca-8eb78c0218ba",
        "assertions": [
          {
            "assertion": "Expect 404 for non-existing ID",
            "skipped": false
          },
          {
            "assertion": "Response mentions not found",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e7751e06-909d-4020-b994-7cc260b6c3bb",
          "length": 33,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "215297e6-d30a-4ad2-b642-ff173fc66fc9"
        },
        "item": {
          "id": "4ae0de74-bbc1-4fa0-ae2c-2706c57d5e49",
          "name": "Delete - Invalid ID type (abc)",
          "request": {
            "description": {
              "content": "Invalid ID type should return 404 from Flask routing.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "delete",
                "abc"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "45354e39-7e12-4fdf-955e-3606f1fd8fca",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 404 for invalid ID type', function(){ pm.expect(pm.response.code).to.equal(404); });"
                ],
                "_lastExecutionId": "6fbf5347-89ce-4d4f-b4f7-7cd4525fc59d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Invalid ID type should return 404 from Flask routing.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "delete",
              "abc"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "76d9d779-fb44-4bbf-b58d-7a5d025029d9",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "4926255f-6a4f-40e9-b37f-67b838cfb5a5",
          "status": "NOT FOUND",
          "code": 404,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:28 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "36"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 36
        },
        "id": "4ae0de74-bbc1-4fa0-ae2c-2706c57d5e49",
        "assertions": [
          {
            "assertion": "Expect 404 for invalid ID type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b4735510-0e23-43d5-8985-3645f84af87b",
          "length": 33,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dffaa9b9-6732-4287-a677-76801b0a9d43"
        },
        "item": {
          "id": "143f6ab0-4091-4aca-b358-a129ac75ac7d",
          "name": "Delete - DB connection down (stop DB before running)",
          "request": {
            "description": {
              "content": "Stop DB before running. Expect 503.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "delete",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dc9e0652-ed92-4c2e-9095-32e4ca85b9ff",
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                  "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                ],
                "_lastExecutionId": "b82dbae3-4d4c-4c97-9102-da2ff48870dc"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Stop DB before running. Expect 503.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "delete",
              ""
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "510852c9-ba89-43d8-a31f-ac4a540474e3",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "c5f2fad7-62c6-4da0-9619-044c39411e24",
          "status": "NOT FOUND",
          "code": 404,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:28 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "36"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 27,
          "responseSize": 36
        },
        "id": "143f6ab0-4091-4aca-b358-a129ac75ac7d",
        "assertions": [
          {
            "assertion": "DB down test not executed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "DB down test not executed",
              "message": "Database is up. Stop PostgreSQL and re-run request to validate 503. Got: 404",
              "stack": "AssertionError: Database is up. Stop PostgreSQL and re-run request to validate 503. Got: 404\n   at Object.eval sandbox-script.js:1:24)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ef46fdd2-7e46-4307-8c44-8f67cbb841af",
          "length": 33,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d97e05c7-5f42-441f-a2a7-a71e9eb71ab4"
        },
        "item": {
          "id": "5a6350e1-7427-4cc6-b61f-7884c9e32336",
          "name": "DB connection failure - change env base_url to invalid host before running",
          "request": {
            "description": {
              "content": "To simulate change DB host, adjust server DB config. Postman cannot change DB host remotely â€” run after changing server config or run against a server configured with invalid DB host.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b49cc2be-2e6a-455b-80ae-baab0c41d264",
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                  "else { pm.test('DB connection failure not reproduced', function(){ pm.expect.fail('Expected 503 when DB host invalid. Ensure server is configured to use invalid DB host and re-run. Received: '+pm.response.code); }); }"
                ],
                "_lastExecutionId": "37a09ffa-0e4d-4762-9516-085e427f39ed"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "To simulate change DB host, adjust server DB config. Postman cannot change DB host remotely â€” run after changing server config or run against a server configured with invalid DB host.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "health"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d08b7cd6-2e55-493b-9048-a0cca9341ea8",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "cbba271a-389a-4df9-a142-c3fb4c758afa",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:28 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              32,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 298,
          "responseSize": 26
        },
        "id": "5a6350e1-7427-4cc6-b61f-7884c9e32336",
        "assertions": [
          {
            "assertion": "DB connection failure not reproduced",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "DB connection failure not reproduced",
              "message": "Expected 503 when DB host invalid. Ensure server is configured to use invalid DB host and re-run. Received: 200",
              "stack": "AssertionError: Expected 503 when DB host invalid. Ensure server is configured to use invalid DB host and re-run. Received: 200\n   at Object.eval sandbox-script.js:1:25)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a4c496db-dbe7-44f0-bf5c-44e210095fdf",
          "length": 33,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f743ab62-49da-4452-9632-b4ace0c6ba15"
        },
        "item": {
          "id": "14798c41-16fe-44ce-93ee-54fb8fc1e4c8",
          "name": "Unhandled Python exception simulation (modify server route to raise Exception)",
          "request": {
            "description": {
              "content": "To validate global exception handling temporarily modify server to raise an exception for this route. Expect 500 and a JSON error.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "some-route-that-raises"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82d10a0a-f72e-4986-92e7-003ef9387a32",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 500 when server raises unhandled exception', function(){ pm.expect([500,502,503]).to.include(pm.response.code); });",
                  "pm.test('Response contains JSON error field', function(){ try{ var j=pm.response.json(); pm.expect(j).to.have.property('error'); } catch(e) { pm.expect.fail('Response not JSON with error'); } });"
                ],
                "_lastExecutionId": "1adff991-edd1-4fe1-8cc1-eb2127462578"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "To validate global exception handling temporarily modify server to raise an exception for this route. Expect 500 and a JSON error.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "some-route-that-raises"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "39da9abe-ae6b-4a1d-8efe-8d8f64d71cde",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "16a5c92c-ccb6-46c4-bb45-1a38d61bc173",
          "status": "NOT FOUND",
          "code": 404,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "36"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 36
        },
        "id": "14798c41-16fe-44ce-93ee-54fb8fc1e4c8",
        "assertions": [
          {
            "assertion": "Expect 500 when server raises unhandled exception",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Expect 500 when server raises unhandled exception",
              "message": "expected [ 500, 502, 503 ] to include 404",
              "stack": "AssertionError: expected [ 500, 502, 503 ] to include 404\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "Response contains JSON error field",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c9e3a486-e980-4a40-a2d2-11205b5c4c8b",
          "length": 33,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "549b6e09-8e9e-4201-a4ee-bc0512f757e9"
        },
        "item": {
          "id": "2f75e601-c496-49b3-ba7e-6d322183118b",
          "name": "JSON decoding error - send malformed JSON",
          "request": {
            "description": {
              "content": "Sends malformed JSON. Server should return an error (400 or 500) handled globally.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"publisher\": \"Packt\", }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "59455131-40cd-4148-8cff-fa5ff7647b02",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 4xx or 5xx for malformed JSON', function(){ pm.expect(pm.response.code).to.be.above(399); });",
                  "pm.test('Response mentions JSON parse or error', function(){ var txt = pm.response.text().toLowerCase(); pm.expect(txt).to.satisfy(function(s){ return s.includes('json') || s.includes('parse') || s.includes('error'); }); });"
                ],
                "_lastExecutionId": "d42f92c8-4743-488e-880e-88ca5dbe9946"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Sends malformed JSON. Server should return an error (400 or 500) handled globally.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "create"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "424870a5-7cec-4fb8-b645-988db0039f25",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "25",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \"publisher\": \"Packt\", }"
          }
        },
        "response": {
          "id": "8252cace-b6b2-4771-93ff-7b67e006ca3a",
          "status": "INTERNAL SERVER ERROR",
          "code": 500,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "180"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              32,
              34,
              52,
              48,
              48,
              32,
              66,
              97,
              100,
              32,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              58,
              32,
              70,
              97,
              105,
              108,
              101,
              100,
              32,
              116,
              111,
              32,
              100,
              101,
              99,
              111,
              100,
              101,
              32,
              74,
              83,
              79,
              78,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              58,
              32,
              69,
              120,
              112,
              101,
              99,
              116,
              105,
              110,
              103,
              32,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              32,
              110,
              97,
              109,
              101,
              32,
              101,
              110,
              99,
              108,
              111,
              115,
              101,
              100,
              32,
              105,
              110,
              32,
              100,
              111,
              117,
              98,
              108,
              101,
              32,
              113,
              117,
              111,
              116,
              101,
              115,
              58,
              32,
              108,
              105,
              110,
              101,
              32,
              49,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              32,
              50,
              53,
              32,
              40,
              99,
              104,
              97,
              114,
              32,
              50,
              52,
              41,
              34,
              44,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              32,
              69,
              114,
              114,
              111,
              114,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 38,
          "responseSize": 180
        },
        "id": "2f75e601-c496-49b3-ba7e-6d322183118b",
        "assertions": [
          {
            "assertion": "Expect 4xx or 5xx for malformed JSON",
            "skipped": false
          },
          {
            "assertion": "Response mentions JSON parse or error",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5fac3c21-796d-47c0-9c81-7cb463d3058d",
          "length": 33,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1956e38b-5366-41e6-b62d-1afa40794148"
        },
        "item": {
          "id": "0b3ded0f-18a9-4cb8-82ad-01a45ed9f296",
          "name": "Missing route - GET /unknown",
          "request": {
            "description": {
              "content": "Hit a missing route. Expect 404 and JSON error message or HTML 404 depending on app configuration.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "unknown"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "840d1989-a15e-42d0-a0b1-dc66b57e5951",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 404 Not Found', function(){ pm.expect(pm.response.code).to.equal(404); });",
                  "pm.test('If JSON returned it should contain error key', function(){ try{ var j=pm.response.json(); pm.expect(j).to.have.property('error'); } catch(e){ pm.test('Response not JSON - likely HTML 404', function(){ pm.expect(pm.response.code).to.equal(404); }); } });"
                ],
                "_lastExecutionId": "c9365af3-c58e-429f-8be2-3eb7ba8881fa"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Hit a missing route. Expect 404 and JSON error message or HTML 404 depending on app configuration.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "unknown"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6f9cb662-5945-4438-8a4e-194f6fb6d649",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "147bd790-014d-4ce4-8a90-1775865d6c10",
          "status": "NOT FOUND",
          "code": 404,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "36"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 16,
          "responseSize": 36
        },
        "id": "0b3ded0f-18a9-4cb8-82ad-01a45ed9f296",
        "assertions": [
          {
            "assertion": "Expect 404 Not Found",
            "skipped": false
          },
          {
            "assertion": "If JSON returned it should contain error key",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bc6629ef-bb87-4bb9-a2ec-50b4b411d38f",
          "length": 33,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8fcb4626-c148-4321-905f-f67330a6e6cc"
        },
        "item": {
          "id": "5cbfb557-7409-4416-992b-4ead6dc719b2",
          "name": "Invalid HTTP method - PATCH /create (expect 405)",
          "request": {
            "description": {
              "content": "PATCH is not allowed on /create; expect 405 Method Not Allowed or 404 depending on Flask configuration.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"x\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c70a8350-95ed-4944-a10d-da0b4eda377a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 405 or 404 for invalid method', function(){ pm.expect([404,405]).to.include(pm.response.code); });"
                ],
                "_lastExecutionId": "557d6b64-2b70-4e7f-8681-c3c3699dd0e4"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "PATCH is not allowed on /create; expect 405 Method Not Allowed or 404 depending on Flask configuration.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "create"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7bf4cc40-907a-443d-b142-d68bfc2ce007",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "18",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\"publisher\": \"x\"}"
          }
        },
        "response": {
          "id": "dab91402-4b44-44ba-88a5-5cd1e60e1660",
          "status": "INTERNAL SERVER ERROR",
          "code": 500,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "123"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              32,
              34,
              52,
              48,
              53,
              32,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              58,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              116,
              104,
              111,
              100,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              97,
              108,
              108,
              111,
              119,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              85,
              82,
              76,
              46,
              34,
              44,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              34,
              85,
              110,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              69,
              114,
              114,
              111,
              114,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 39,
          "responseSize": 123
        },
        "id": "5cbfb557-7409-4416-992b-4ead6dc719b2",
        "assertions": [
          {
            "assertion": "Expect 405 or 404 for invalid method",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Expect 405 or 404 for invalid method",
              "message": "expected [ 404, 405 ] to include 500",
              "stack": "AssertionError: expected [ 404, 405 ] to include 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ee3f90d4-3f31-46b8-bc03-d029a98da1cf",
          "length": 33,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "76dc26f2-1a1a-4999-a13e-5b036b4c5c60"
        },
        "item": {
          "id": "e6f65a70-2d3a-4e60-938d-f1f4a01f35fe",
          "name": "API contract & consistency - check headers and JSON for GET / and /health",
          "request": {
            "description": {
              "content": "Verifies Content-Type header and JSON format for a representative endpoint.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "12f58465-c5bd-41d9-ab6a-0be2584c0d88",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Content-Type header includes application/json', function(){ pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
                  "pm.test('Response is valid JSON', function(){ try{ pm.response.json(); } catch(e){ pm.expect.fail('Response not valid JSON'); } });"
                ],
                "_lastExecutionId": "c4224feb-9615-4868-a4c4-e4905172bf78"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Verifies Content-Type header and JSON format for a representative endpoint.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "health"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8545d90a-fafb-4cdf-8c13-914345d33dd5",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1453398b-7c88-47a8-bfd2-48de4a88cf54",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              32,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 283,
          "responseSize": 26
        },
        "id": "e6f65a70-2d3a-4e60-938d-f1f4a01f35fe",
        "assertions": [
          {
            "assertion": "Content-Type header includes application/json",
            "skipped": false
          },
          {
            "assertion": "Response is valid JSON",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "97923f87-afd1-4095-b9b7-c57a61b543e3",
          "length": 33,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c1948a90-7cd8-44ed-974b-1ce0a9d0529c"
        },
        "item": {
          "id": "df6af206-8dd2-48fd-976f-ea52e81dce89",
          "name": "Schema - Health endpoint",
          "request": {
            "description": {
              "content": "Validate /health response against schema: {status: string}",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "84ab08b4-a962-4165-a081-691c7985bbd9",
                "type": "text/javascript",
                "exec": [
                  "var healthSchema = {",
                  "  'type': 'object',",
                  "  'properties': { 'status': { 'type': 'string' } },",
                  "  'required': ['status']",
                  "};",
                  "pm.test('Health response matches schema', function() {",
                  "  var json = pm.response.json();",
                  "  pm.expect(tv4.validate(json, healthSchema)).to.be.true;",
                  "  if (!tv4.validate(json, healthSchema)) {",
                  "    console.log(tv4.error);",
                  "  }",
                  "});"
                ],
                "_lastExecutionId": "9ea13118-707d-4381-80b3-39dace2bb731"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Validate /health response against schema: {status: string}",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "health"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "48a752fb-caef-4d1d-9ab0-90d2a2459204",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "36b277df-90c9-4e93-bee5-d87b66174a43",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              32,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 192,
          "responseSize": 26
        },
        "id": "df6af206-8dd2-48fd-976f-ea52e81dce89",
        "assertions": [
          {
            "assertion": "Health response matches schema",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5ecd2741-adb1-4cb6-b416-b763d15bb0b3",
          "length": 33,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6476230a-9e04-4169-a023-49cc7d09b181"
        },
        "item": {
          "id": "d0b77e02-1882-4450-8d37-b09546d56a38",
          "name": "Schema - Get all books (array of book objects)",
          "request": {
            "description": {
              "content": "Validate GET / returns an array of book objects",
              "type": "text/plain"
            },
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "13c8f3ce-2964-49ea-86ed-636927a6b0c5",
                "type": "text/javascript",
                "exec": [
                  "var booksSchema = {",
                  "  'type': 'array',",
                  "  'items': {",
                  "    'type': 'object',",
                  "    'properties': {",
                  "      'id': { 'type': ['integer','number','null'] },",
                  "      'publisher': { 'type': 'string' },",
                  "      'name': { 'type': 'string' },",
                  "      'date': { 'type': 'string' },",
                  "      'Cost': { 'type': ['number','integer'] }",
                  "    },",
                  "    'required': ['publisher','name','date','Cost']",
                  "  }",
                  "};",
                  "pm.test('Books response matches schema', function() {",
                  "  var json = pm.response.json();",
                  "  pm.expect(tv4.validate(json, booksSchema)).to.be.true;",
                  "  if (!tv4.validate(json, booksSchema)) { console.log(tv4.error); }",
                  "});"
                ],
                "_lastExecutionId": "1f819bbc-f3be-4c3c-9c4c-786e24860456"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Validate GET / returns an array of book objects",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              ""
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b85bdc45-b4ab-4bc0-b0c9-00ebcdc2cd52",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4065f03c-346c-49f4-be96-9b0381f3cd43",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "7002"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              48,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              48,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              48,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              48,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              51,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              48,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              76,
              65,
              83,
              75,
              95,
              68,
              85,
              80,
              76,
              73,
              67,
              65,
              84,
              69,
              95,
              84,
              69,
              83,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              80,
              97,
              99,
              107,
              116,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              52,
              57,
              46,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              87,
              101,
              100,
              44,
              32,
              48,
              49,
              32,
              74,
              97,
              110,
              32,
              50,
              48,
              50,
              53,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              108,
              97,
              115,
              107,
              49,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              10,
              93,
              10
            ]
          },
          "cookie": [],
          "responseTime": 161,
          "responseSize": 7002
        },
        "id": "d0b77e02-1882-4450-8d37-b09546d56a38",
        "assertions": [
          {
            "assertion": "Books response matches schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Books response matches schema",
              "message": "expected false to be true",
              "stack": "AssertionError: expected false to be true\n   at Object.eval sandbox-script.js:1:32)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6372bd33-9b42-4685-85c1-9790966c9b11",
          "length": 33,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0507e549-af4b-4339-aef5-72f1e8f6e1fc"
        },
        "item": {
          "id": "6f310ece-bb19-4279-972e-9ce79cfa2927",
          "name": "Schema - Create book response (object)",
          "request": {
            "description": {
              "content": "Validate POST /create response conforms to the created book object schema.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"SchemaTestBook\", \"date\": \"2025-01-01\", \"Cost\": 9.99}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "841aa4c5-3df6-43d3-97d3-60556959d25c",
                "type": "text/javascript",
                "exec": [
                  "var bookSchema = {",
                  "  'type': 'object',",
                  "  'properties': {",
                  "    'id': { 'type': ['integer','number'] },",
                  "    'publisher': { 'type': 'string' },",
                  "    'name': { 'type': 'string' },",
                  "    'date': { 'type': 'string' },",
                  "    'Cost': { 'type': ['number','integer'] }",
                  "  },",
                  "  'required': ['publisher','name','date','Cost']",
                  "};",
                  "pm.test('Create response matches book schema', function() {",
                  "  try { var json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                  "  pm.expect(tv4.validate(json, bookSchema)).to.be.true;",
                  "  if (!tv4.validate(json, bookSchema)) { console.log(tv4.error); }",
                  "});",
                  "",
                  "// Save created id if present",
                  "try { var j = pm.response.json(); if (j.id) { pm.environment.set('created_book_id', j.id); } } catch(e) {}"
                ],
                "_lastExecutionId": "51c13ce4-b257-4558-93e4-2b57a1f072fa"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Validate POST /create response conforms to the created book object schema.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "create"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6592d331-753d-438b-8cff-3459e0c4edc1",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "87",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"SchemaTestBook\", \"date\": \"2025-01-01\", \"Cost\": 9.99}"
          }
        },
        "response": {
          "id": "81e6303c-fbfe-4234-a9e1-6eb6d76c4623",
          "status": "CREATED",
          "code": 201,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.12.3"
            },
            {
              "key": "Date",
              "value": "Mon, 13 Oct 2025 15:19:31 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "164"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              67,
              111,
              115,
              116,
              34,
              58,
              32,
              57,
              46,
              57,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              32,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              99,
              104,
              101,
              109,
              97,
              84,
              101,
              115,
              116,
              66,
              111,
              111,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              34,
              58,
              32,
              34,
              79,
              39,
              82,
              101,
              105,
              108,
              108,
              121,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              32,
              34,
              66,
              111,
              111,
              107,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 201,
          "responseSize": 164
        },
        "id": "6f310ece-bb19-4279-972e-9ce79cfa2927",
        "assertions": [
          {
            "assertion": "Create response matches book schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Create response matches book schema",
              "message": "expected false to be true",
              "stack": "AssertionError: expected false to be true\n   at Object.eval sandbox-script.js:1:33)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 28497
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "DB down test not executed - DB appears up",
          "message": "Database is up. To validate this test, stop PostgreSQL and re-run this request. Received status: 200",
          "stack": "AssertionError: Database is up. To validate this test, stop PostgreSQL and re-run this request. Received status: 200\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "830d998f8c795c5f8f0e7d456dd61d77",
          "id": "72780b2e-f49d-4d4b-95c9-e292713956f7",
          "timestamp": 1760368762324,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "25d92d13-917a-45b4-b3a3-dee1256c2697",
          "name": "Health check - DB down (must simulate by stopping DB before running)",
          "request": {
            "description": {
              "content": "Simulate DB down by stopping PostgreSQL. This test expects HTTP 503. If DB is up the test will fail with an instructive message.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e19209fc-7e44-4f7d-9a34-5e76924ab8f9",
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 503) {",
                  "    pm.test('DB down - returned 503 as expected', function () { pm.expect(pm.response.code).to.equal(503); });",
                  "} else {",
                  "    pm.test('DB down test not executed - DB appears up', function () {",
                  "        pm.expect.fail('Database is up. To validate this test, stop PostgreSQL and re-run this request. Received status: ' + pm.response.code);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "949c406b-6d84-4634-8297-511065e51e3b"
              }
            }
          ]
        },
        "parent": {
          "id": "12b683f9-911d-4b88-8a98-828cf8fa5394",
          "name": "SECTION 1 - Basic Functional Tests",
          "item": [
            {
              "id": "ba3e9646-11db-40b8-aba2-ae5fe4bd5fff",
              "name": "Server Start Check (root) - verify server responds",
              "request": {
                "description": {
                  "content": "Check that the server responds at the base URL. If Flask is not started this will fail to connect.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "76bcabd5-ca3c-4d1f-8b33-54772bb3a422",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Server responds (any 2xx or 3xx)', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200,201,202,203,204,301,302,304]);",
                      "});",
                      "",
                      "pm.test('Content-Type is application/json when present', function () {",
                      "    if (pm.response.headers.has('Content-Type')) {",
                      "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                      "    } else {",
                      "        pm.skip('No Content-Type header present');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "c3199d8b-e350-4726-9ff5-8c6e9b274fbf"
                  }
                }
              ]
            },
            {
              "id": "3464d6c2-60bf-4f96-bdea-60b7bff2a7e5",
              "name": "CORS check - looks for Access-Control-Allow-Origin header",
              "request": {
                "description": {
                  "content": "Sends Origin header and checks for Access-Control-Allow-Origin in response headers.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Origin",
                    "value": "http://example.com"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43ed3862-7fa6-4c69-b02e-650574cc35ed",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health endpoint returns 200 or 503', function () {",
                      "    pm.expect([200,503]).to.include(pm.response.code);",
                      "});",
                      "",
                      "pm.test('CORS header present (Access-Control-Allow-Origin)', function () {",
                      "    if (pm.response.headers.has('Access-Control-Allow-Origin')) {",
                      "        pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.be.a('string');",
                      "    } else {",
                      "        pm.fail('CORS header Access-Control-Allow-Origin not present â€” ensure CORS is enabled on server');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "dce0984a-4f78-4b12-8e51-4c7660365697"
                  }
                }
              ]
            },
            {
              "id": "610bc6ca-27b3-48f0-bfdd-76fb76e7bbb2",
              "name": "Health check - healthy DB (expect 200)",
              "request": {
                "description": {
                  "content": "Expect 200 and JSON {status: 'healthy'} when DB is up.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "de8531ef-c61d-46ae-ad90-5f2d92e26384",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status is 200 OK', function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "pm.test('Response is JSON and contains status field', function () {",
                      "    pm.response.to.have.header('Content-Type');",
                      "    var json = {};",
                      "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response is not JSON'); }",
                      "    pm.expect(json).to.have.property('status');",
                      "    pm.expect(json.status).to.be.oneOf(['healthy','ok','Healthy','OK']);",
                      "});"
                    ],
                    "_lastExecutionId": "ec331470-300b-488b-8cef-0aa7b09e30b9"
                  }
                }
              ]
            },
            {
              "id": "25d92d13-917a-45b4-b3a3-dee1256c2697",
              "name": "Health check - DB down (must simulate by stopping DB before running)",
              "request": {
                "description": {
                  "content": "Simulate DB down by stopping PostgreSQL. This test expects HTTP 503. If DB is up the test will fail with an instructive message.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e19209fc-7e44-4f7d-9a34-5e76924ab8f9",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) {",
                      "    pm.test('DB down - returned 503 as expected', function () { pm.expect(pm.response.code).to.equal(503); });",
                      "} else {",
                      "    pm.test('DB down test not executed - DB appears up', function () {",
                      "        pm.expect.fail('Database is up. To validate this test, stop PostgreSQL and re-run this request. Received status: ' + pm.response.code);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "949c406b-6d84-4634-8297-511065e51e3b"
                  }
                }
              ]
            },
            {
              "id": "6b4b6853-f11b-466f-8d7b-891b301109de",
              "name": "Fetch all books - expect JSON array (200)",
              "request": {
                "description": {
                  "content": "Retrieve all books. When DB has data returns array of objects, when empty returns [].",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "661b485e-097d-4039-bb2b-6a2bcfc982b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status 200', function () { pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response is JSON array', function () {",
                      "    var json = [];",
                      "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                      "    pm.expect(json).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "6c0362a1-47b0-4a86-9745-9136f4d7e9c1"
                  }
                }
              ]
            },
            {
              "id": "49bb763c-6910-46c6-88f6-d2b090989af5",
              "name": "Fetch all books - empty DB (manual prepare: truncate book table)",
              "request": {
                "description": {
                  "content": "Before running this request manually truncate the book table. Expect [] and 200 OK.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eaffc7df-6bff-498a-90a2-c0ad003e5e72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status 200', function () { pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response is JSON array (possibly empty)', function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json).to.be.an('array');",
                      "    pm.test('Array empty as requested', function () {",
                      "        // This will fail if DB wasn't truncated - instruct user to truncate if not empty",
                      "        if (json.length !== 0) { pm.expect.fail('DB not empty. To validate this test truncate the book table before running.'); }",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "4a7a37f9-39ca-4318-91a8-99142ed2d9f5"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e160e897-c7f5-4184-ad8c-94b618a80d1e",
          "length": 33,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b61fc6b8-1b75-4758-b91d-c5e301017f8c",
          "scriptId": "e19209fc-7e44-4f7d-9a34-5e76924ab8f9",
          "execution": "949c406b-6d84-4634-8297-511065e51e3b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Array empty as requested",
          "message": "DB not empty. To validate this test truncate the book table before running.",
          "stack": "AssertionError: DB not empty. To validate this test truncate the book table before running.\n   at Object.eval sandbox-script.js:3:6)",
          "checksum": "0fc100310384f953f262875027e73164",
          "id": "e499f9f8-5b26-4481-97db-9dfdb4ecc467",
          "timestamp": 1760368763534,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "49bb763c-6910-46c6-88f6-d2b090989af5",
          "name": "Fetch all books - empty DB (manual prepare: truncate book table)",
          "request": {
            "description": {
              "content": "Before running this request manually truncate the book table. Expect [] and 200 OK.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eaffc7df-6bff-498a-90a2-c0ad003e5e72",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.expect(pm.response.code).to.equal(200); });",
                  "pm.test('Response is JSON array (possibly empty)', function () {",
                  "    var json = pm.response.json();",
                  "    pm.expect(json).to.be.an('array');",
                  "    pm.test('Array empty as requested', function () {",
                  "        // This will fail if DB wasn't truncated - instruct user to truncate if not empty",
                  "        if (json.length !== 0) { pm.expect.fail('DB not empty. To validate this test truncate the book table before running.'); }",
                  "    });",
                  "});"
                ],
                "_lastExecutionId": "4a7a37f9-39ca-4318-91a8-99142ed2d9f5"
              }
            }
          ]
        },
        "parent": {
          "id": "12b683f9-911d-4b88-8a98-828cf8fa5394",
          "name": "SECTION 1 - Basic Functional Tests",
          "item": [
            {
              "id": "ba3e9646-11db-40b8-aba2-ae5fe4bd5fff",
              "name": "Server Start Check (root) - verify server responds",
              "request": {
                "description": {
                  "content": "Check that the server responds at the base URL. If Flask is not started this will fail to connect.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "76bcabd5-ca3c-4d1f-8b33-54772bb3a422",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Server responds (any 2xx or 3xx)', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200,201,202,203,204,301,302,304]);",
                      "});",
                      "",
                      "pm.test('Content-Type is application/json when present', function () {",
                      "    if (pm.response.headers.has('Content-Type')) {",
                      "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                      "    } else {",
                      "        pm.skip('No Content-Type header present');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "c3199d8b-e350-4726-9ff5-8c6e9b274fbf"
                  }
                }
              ]
            },
            {
              "id": "3464d6c2-60bf-4f96-bdea-60b7bff2a7e5",
              "name": "CORS check - looks for Access-Control-Allow-Origin header",
              "request": {
                "description": {
                  "content": "Sends Origin header and checks for Access-Control-Allow-Origin in response headers.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Origin",
                    "value": "http://example.com"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43ed3862-7fa6-4c69-b02e-650574cc35ed",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health endpoint returns 200 or 503', function () {",
                      "    pm.expect([200,503]).to.include(pm.response.code);",
                      "});",
                      "",
                      "pm.test('CORS header present (Access-Control-Allow-Origin)', function () {",
                      "    if (pm.response.headers.has('Access-Control-Allow-Origin')) {",
                      "        pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.be.a('string');",
                      "    } else {",
                      "        pm.fail('CORS header Access-Control-Allow-Origin not present â€” ensure CORS is enabled on server');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "dce0984a-4f78-4b12-8e51-4c7660365697"
                  }
                }
              ]
            },
            {
              "id": "610bc6ca-27b3-48f0-bfdd-76fb76e7bbb2",
              "name": "Health check - healthy DB (expect 200)",
              "request": {
                "description": {
                  "content": "Expect 200 and JSON {status: 'healthy'} when DB is up.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "de8531ef-c61d-46ae-ad90-5f2d92e26384",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status is 200 OK', function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "pm.test('Response is JSON and contains status field', function () {",
                      "    pm.response.to.have.header('Content-Type');",
                      "    var json = {};",
                      "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response is not JSON'); }",
                      "    pm.expect(json).to.have.property('status');",
                      "    pm.expect(json.status).to.be.oneOf(['healthy','ok','Healthy','OK']);",
                      "});"
                    ],
                    "_lastExecutionId": "ec331470-300b-488b-8cef-0aa7b09e30b9"
                  }
                }
              ]
            },
            {
              "id": "25d92d13-917a-45b4-b3a3-dee1256c2697",
              "name": "Health check - DB down (must simulate by stopping DB before running)",
              "request": {
                "description": {
                  "content": "Simulate DB down by stopping PostgreSQL. This test expects HTTP 503. If DB is up the test will fail with an instructive message.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e19209fc-7e44-4f7d-9a34-5e76924ab8f9",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) {",
                      "    pm.test('DB down - returned 503 as expected', function () { pm.expect(pm.response.code).to.equal(503); });",
                      "} else {",
                      "    pm.test('DB down test not executed - DB appears up', function () {",
                      "        pm.expect.fail('Database is up. To validate this test, stop PostgreSQL and re-run this request. Received status: ' + pm.response.code);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "949c406b-6d84-4634-8297-511065e51e3b"
                  }
                }
              ]
            },
            {
              "id": "6b4b6853-f11b-466f-8d7b-891b301109de",
              "name": "Fetch all books - expect JSON array (200)",
              "request": {
                "description": {
                  "content": "Retrieve all books. When DB has data returns array of objects, when empty returns [].",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "661b485e-097d-4039-bb2b-6a2bcfc982b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status 200', function () { pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response is JSON array', function () {",
                      "    var json = [];",
                      "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                      "    pm.expect(json).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "6c0362a1-47b0-4a86-9745-9136f4d7e9c1"
                  }
                }
              ]
            },
            {
              "id": "49bb763c-6910-46c6-88f6-d2b090989af5",
              "name": "Fetch all books - empty DB (manual prepare: truncate book table)",
              "request": {
                "description": {
                  "content": "Before running this request manually truncate the book table. Expect [] and 200 OK.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eaffc7df-6bff-498a-90a2-c0ad003e5e72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status 200', function () { pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response is JSON array (possibly empty)', function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(json).to.be.an('array');",
                      "    pm.test('Array empty as requested', function () {",
                      "        // This will fail if DB wasn't truncated - instruct user to truncate if not empty",
                      "        if (json.length !== 0) { pm.expect.fail('DB not empty. To validate this test truncate the book table before running.'); }",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "4a7a37f9-39ca-4318-91a8-99142ed2d9f5"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d198c436-d04a-4e3b-b952-af7ec17f04bd",
          "length": 33,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7297b79c-a55a-4b0e-9a4d-325bc54931c7",
          "scriptId": "eaffc7df-6bff-498a-90a2-c0ad003e5e72",
          "execution": "4a7a37f9-39ca-4318-91a8-99142ed2d9f5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is JSON and echoes fields",
          "message": "expected { data: { Cost: 49.99, â€¦(3) }, â€¦(1) } to have property 'publisher'",
          "stack": "AssertionError: expected { data: { Cost: 49.99, â€¦(3) }, â€¦(1) } to have property 'publisher'\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "52ccbe4c33761f07aa0819db9b3d0eea",
          "id": "c1320ac2-88d3-4d01-b290-112fd27cf00f",
          "timestamp": 1760368764107,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "fdf690fe-8ef2-4d08-9ea3-af8c1cd92868",
          "name": "Create - Valid book (positive)",
          "request": {
            "description": {
              "content": "Creates a valid book. Stores created id into {{created_book_id}} for later use (if response returns id).",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101\", \"date\": \"2025-01-01\", \"Cost\": 49.99}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3763ce0f-d1dc-4f27-891f-d99502c51664",
                "type": "text/javascript",
                "exec": [
                  "// No pre-req"
                ],
                "_lastExecutionId": "cb5e7dcd-4850-4120-8369-c6c7a2292f39"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d6e71fc4-267e-4878-91ba-ae34cc9c82a6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201 Created', function () {",
                  "    pm.expect(pm.response.code).to.equal(201);",
                  "});",
                  "",
                  "pm.test('Response is JSON and echoes fields', function () {",
                  "    var json = {};",
                  "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                  "    pm.expect(json).to.have.property('publisher');",
                  "    pm.expect(json).to.have.property('name');",
                  "    pm.expect(json).to.have.property('date');",
                  "    pm.expect(json).to.have.property('Cost');",
                  "});",
                  "",
                  "// If server returns an id, save it to an environment variable for subsequent tests",
                  "try {",
                  "    var j = pm.response.json();",
                  "    if (j.id) { pm.environment.set('created_book_id', j.id); }",
                  "} catch(e) {}"
                ],
                "_lastExecutionId": "5aabef3f-9b05-4e8c-b8ab-b083464c318d"
              }
            }
          ]
        },
        "parent": {
          "id": "1be62a4a-0754-4927-8b19-2813d1b50623",
          "name": "SECTION 2 - Create Book API (Positive & Validation Tests)",
          "item": [
            {
              "id": "fdf690fe-8ef2-4d08-9ea3-af8c1cd92868",
              "name": "Create - Valid book (positive)",
              "request": {
                "description": {
                  "content": "Creates a valid book. Stores created id into {{created_book_id}} for later use (if response returns id).",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101\", \"date\": \"2025-01-01\", \"Cost\": 49.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3763ce0f-d1dc-4f27-891f-d99502c51664",
                    "type": "text/javascript",
                    "exec": [
                      "// No pre-req"
                    ],
                    "_lastExecutionId": "cb5e7dcd-4850-4120-8369-c6c7a2292f39"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d6e71fc4-267e-4878-91ba-ae34cc9c82a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status is 201 Created', function () {",
                      "    pm.expect(pm.response.code).to.equal(201);",
                      "});",
                      "",
                      "pm.test('Response is JSON and echoes fields', function () {",
                      "    var json = {};",
                      "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                      "    pm.expect(json).to.have.property('publisher');",
                      "    pm.expect(json).to.have.property('name');",
                      "    pm.expect(json).to.have.property('date');",
                      "    pm.expect(json).to.have.property('Cost');",
                      "});",
                      "",
                      "// If server returns an id, save it to an environment variable for subsequent tests",
                      "try {",
                      "    var j = pm.response.json();",
                      "    if (j.id) { pm.environment.set('created_book_id', j.id); }",
                      "} catch(e) {}"
                    ],
                    "_lastExecutionId": "5aabef3f-9b05-4e8c-b8ab-b083464c318d"
                  }
                }
              ]
            },
            {
              "id": "263c3409-2fde-424c-bb88-c2ace30df9af",
              "name": "Create - Missing required field (publisher)",
              "request": {
                "description": {
                  "content": "Omit publisher field. Expect 400 with error message about missing field.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\": \"Flask101\", \"date\": \"2025-01-01\", \"Cost\": 49.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "27cff61d-1d9b-4a4d-8139-f481f745248e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status is 400 Bad Request', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "pm.test('Error mentions missing publisher', function () {",
                      "    var json = {};",
                      "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                      "    pm.expect(JSON.stringify(json).toLowerCase()).to.include('publisher');",
                      "});"
                    ],
                    "_lastExecutionId": "0c5a2a77-1a7a-45bf-9a86-3f11850bfe16"
                  }
                }
              ]
            },
            {
              "id": "e1942855-0b06-493a-bd11-f34c2a776843",
              "name": "Create - Invalid cost type",
              "request": {
                "description": {
                  "content": "Cost as string should validate and return 400.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"Flask\", \"date\": \"2025-01-01\", \"Cost\": \"abc\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bfc69a22-aa5b-47aa-8b94-430b60c22b31",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status 400 for invalid cost', function () { pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions cost or numeric', function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(JSON.stringify(json).toLowerCase()).to.satisfy(function(s) {",
                      "        return s.includes('cost') || s.includes('numeric') || s.includes('invalid');",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "2dcc29d1-6dac-44fb-8e32-b9b2f1fac982"
                  }
                }
              ]
            },
            {
              "id": "ee540b41-bccc-4173-bc1a-f0355153d757",
              "name": "Create - Invalid date format",
              "request": {
                "description": {
                  "content": "Invalid date format should return a 400 and helpful error.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"Flask\", \"date\": \"32-13-2025\", \"Cost\": 39.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ec1be176-8e1b-46b3-a34d-ae38d61fb1da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 for invalid date format', function () { pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions date format', function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(JSON.stringify(json).toLowerCase()).to.include('date');",
                      "});"
                    ],
                    "_lastExecutionId": "058fee17-84e9-41de-a295-781241dfaf93"
                  }
                }
              ]
            },
            {
              "id": "1416723a-716c-43cc-9298-0a6dccc2f75e",
              "name": "Create - Empty body",
              "request": {
                "description": {
                  "content": "Empty JSON should return 400 with missing body message.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3943a1d-3a4c-4ed7-8f94-8e6b636f8be8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 for empty body', function () { pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions missing body', function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(JSON.stringify(json).toLowerCase()).to.include('body');",
                      "});"
                    ],
                    "_lastExecutionId": "54d33be2-f1e2-4c15-8850-8a1946fd1123"
                  }
                }
              ]
            },
            {
              "id": "992dea20-fee8-44a6-942c-ed98e83edacb",
              "name": "Create - Missing JSON header (send raw text)",
              "request": {
                "description": {
                  "content": "If server enforces JSON header this should return 400 with request must be JSON.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "text/plain"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "hello"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15873d5d-91b5-415e-81a0-24f608621ec1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 when content-type not application/json', function () { pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions JSON', function () {",
                      "    var txt = pm.response.text();",
                      "    pm.expect(txt.toLowerCase()).to.include('json');",
                      "});"
                    ],
                    "_lastExecutionId": "7067fb22-588a-4d46-af1c-66c91a8d4fd1"
                  }
                }
              ]
            },
            {
              "id": "4c7937d1-7c53-4943-b911-6ece760aa326",
              "name": "Create - Extra fields (author) - server may ignore or accept",
              "request": {
                "description": {
                  "content": "Extra fields may be ignored or written depending on schema. Accept either 201 or 200 with success.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"Flask\", \"date\": \"2025-01-01\", \"Cost\": 39.99, \"author\": \"xyz\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4141936f-3dab-4fce-af3a-ce6167770dda",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 201 (created) or 200 (accepted) or 400 if validation fails', function () {",
                      "    pm.expect([200,201,400]).to.include(pm.response.code);",
                      "});",
                      "",
                      "pm.test('If created, response includes the extra field or ignores it', function () {",
                      "    try { var j = pm.response.json(); if (pm.response.code===201 || pm.response.code===200) {",
                      "        // optional check",
                      "        if (j.author) { pm.expect(j.author).to.equal('xyz'); }",
                      "    } } catch(e) {}",
                      "});"
                    ],
                    "_lastExecutionId": "5932b961-f432-4644-80c2-678270bd31aa"
                  }
                }
              ]
            },
            {
              "id": "a479ad6a-274c-4b80-bc19-6acbe56b9e80",
              "name": "Create - Database constraint violation (duplicate name) - make name unique in DB before running",
              "request": {
                "description": {
                  "content": "To validate constraint violation, make the 'name' column unique and insert a duplicate. Expects 400 with constraint error.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"FLASK_DUPLICATE_TEST\", \"date\": \"2025-01-01\", \"Cost\": 39.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8182023-0436-4f0b-b4a3-18408e87bc47",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 400) {",
                      "    pm.test('Constraint violation reported', function () {",
                      "        var j = pm.response.json();",
                      "        pm.expect(JSON.stringify(j).toLowerCase()).to.satisfy(function(s){ return s.includes('constraint') || s.includes('duplicate') || s.includes('unique'); });",
                      "    });",
                      "} else {",
                      "    pm.test('DB constraint test not validated', function () { pm.expect.fail('Server did not return 400. Ensure DB uniqueness constraint is applied and re-run. Received: ' + pm.response.code); });",
                      "}"
                    ],
                    "_lastExecutionId": "b8178430-9747-446f-92b4-d9ceac616d63"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c347d12a-804a-41a7-9e49-a72bbd98948d",
          "length": 33,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "47ab54c3-08d7-4795-b046-b353e1e454bb",
          "scriptId": "d6e71fc4-267e-4878-91ba-ae34cc9c82a6",
          "execution": "5aabef3f-9b05-4e8c-b8ab-b083464c318d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "DB constraint test not validated",
          "message": "Server did not return 400. Ensure DB uniqueness constraint is applied and re-run. Received: 201",
          "stack": "AssertionError: Server did not return 400. Ensure DB uniqueness constraint is applied and re-run. Received: 201\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "ac88fa2d100b22f34d434725188032a2",
          "id": "591df454-a8a1-4104-837a-009e38cdfab4",
          "timestamp": 1760368766149,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a479ad6a-274c-4b80-bc19-6acbe56b9e80",
          "name": "Create - Database constraint violation (duplicate name) - make name unique in DB before running",
          "request": {
            "description": {
              "content": "To validate constraint violation, make the 'name' column unique and insert a duplicate. Expects 400 with constraint error.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"Packt\", \"name\": \"FLASK_DUPLICATE_TEST\", \"date\": \"2025-01-01\", \"Cost\": 39.99}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f8182023-0436-4f0b-b4a3-18408e87bc47",
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 400) {",
                  "    pm.test('Constraint violation reported', function () {",
                  "        var j = pm.response.json();",
                  "        pm.expect(JSON.stringify(j).toLowerCase()).to.satisfy(function(s){ return s.includes('constraint') || s.includes('duplicate') || s.includes('unique'); });",
                  "    });",
                  "} else {",
                  "    pm.test('DB constraint test not validated', function () { pm.expect.fail('Server did not return 400. Ensure DB uniqueness constraint is applied and re-run. Received: ' + pm.response.code); });",
                  "}"
                ],
                "_lastExecutionId": "b8178430-9747-446f-92b4-d9ceac616d63"
              }
            }
          ]
        },
        "parent": {
          "id": "1be62a4a-0754-4927-8b19-2813d1b50623",
          "name": "SECTION 2 - Create Book API (Positive & Validation Tests)",
          "item": [
            {
              "id": "fdf690fe-8ef2-4d08-9ea3-af8c1cd92868",
              "name": "Create - Valid book (positive)",
              "request": {
                "description": {
                  "content": "Creates a valid book. Stores created id into {{created_book_id}} for later use (if response returns id).",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101\", \"date\": \"2025-01-01\", \"Cost\": 49.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3763ce0f-d1dc-4f27-891f-d99502c51664",
                    "type": "text/javascript",
                    "exec": [
                      "// No pre-req"
                    ],
                    "_lastExecutionId": "cb5e7dcd-4850-4120-8369-c6c7a2292f39"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d6e71fc4-267e-4878-91ba-ae34cc9c82a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status is 201 Created', function () {",
                      "    pm.expect(pm.response.code).to.equal(201);",
                      "});",
                      "",
                      "pm.test('Response is JSON and echoes fields', function () {",
                      "    var json = {};",
                      "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                      "    pm.expect(json).to.have.property('publisher');",
                      "    pm.expect(json).to.have.property('name');",
                      "    pm.expect(json).to.have.property('date');",
                      "    pm.expect(json).to.have.property('Cost');",
                      "});",
                      "",
                      "// If server returns an id, save it to an environment variable for subsequent tests",
                      "try {",
                      "    var j = pm.response.json();",
                      "    if (j.id) { pm.environment.set('created_book_id', j.id); }",
                      "} catch(e) {}"
                    ],
                    "_lastExecutionId": "5aabef3f-9b05-4e8c-b8ab-b083464c318d"
                  }
                }
              ]
            },
            {
              "id": "263c3409-2fde-424c-bb88-c2ace30df9af",
              "name": "Create - Missing required field (publisher)",
              "request": {
                "description": {
                  "content": "Omit publisher field. Expect 400 with error message about missing field.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\": \"Flask101\", \"date\": \"2025-01-01\", \"Cost\": 49.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "27cff61d-1d9b-4a4d-8139-f481f745248e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status is 400 Bad Request', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "pm.test('Error mentions missing publisher', function () {",
                      "    var json = {};",
                      "    try { json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                      "    pm.expect(JSON.stringify(json).toLowerCase()).to.include('publisher');",
                      "});"
                    ],
                    "_lastExecutionId": "0c5a2a77-1a7a-45bf-9a86-3f11850bfe16"
                  }
                }
              ]
            },
            {
              "id": "e1942855-0b06-493a-bd11-f34c2a776843",
              "name": "Create - Invalid cost type",
              "request": {
                "description": {
                  "content": "Cost as string should validate and return 400.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"Flask\", \"date\": \"2025-01-01\", \"Cost\": \"abc\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bfc69a22-aa5b-47aa-8b94-430b60c22b31",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status 400 for invalid cost', function () { pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions cost or numeric', function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(JSON.stringify(json).toLowerCase()).to.satisfy(function(s) {",
                      "        return s.includes('cost') || s.includes('numeric') || s.includes('invalid');",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "2dcc29d1-6dac-44fb-8e32-b9b2f1fac982"
                  }
                }
              ]
            },
            {
              "id": "ee540b41-bccc-4173-bc1a-f0355153d757",
              "name": "Create - Invalid date format",
              "request": {
                "description": {
                  "content": "Invalid date format should return a 400 and helpful error.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"Flask\", \"date\": \"32-13-2025\", \"Cost\": 39.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ec1be176-8e1b-46b3-a34d-ae38d61fb1da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 for invalid date format', function () { pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions date format', function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(JSON.stringify(json).toLowerCase()).to.include('date');",
                      "});"
                    ],
                    "_lastExecutionId": "058fee17-84e9-41de-a295-781241dfaf93"
                  }
                }
              ]
            },
            {
              "id": "1416723a-716c-43cc-9298-0a6dccc2f75e",
              "name": "Create - Empty body",
              "request": {
                "description": {
                  "content": "Empty JSON should return 400 with missing body message.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3943a1d-3a4c-4ed7-8f94-8e6b636f8be8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 for empty body', function () { pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions missing body', function () {",
                      "    var json = pm.response.json();",
                      "    pm.expect(JSON.stringify(json).toLowerCase()).to.include('body');",
                      "});"
                    ],
                    "_lastExecutionId": "54d33be2-f1e2-4c15-8850-8a1946fd1123"
                  }
                }
              ]
            },
            {
              "id": "992dea20-fee8-44a6-942c-ed98e83edacb",
              "name": "Create - Missing JSON header (send raw text)",
              "request": {
                "description": {
                  "content": "If server enforces JSON header this should return 400 with request must be JSON.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "text/plain"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "hello"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15873d5d-91b5-415e-81a0-24f608621ec1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 when content-type not application/json', function () { pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions JSON', function () {",
                      "    var txt = pm.response.text();",
                      "    pm.expect(txt.toLowerCase()).to.include('json');",
                      "});"
                    ],
                    "_lastExecutionId": "7067fb22-588a-4d46-af1c-66c91a8d4fd1"
                  }
                }
              ]
            },
            {
              "id": "4c7937d1-7c53-4943-b911-6ece760aa326",
              "name": "Create - Extra fields (author) - server may ignore or accept",
              "request": {
                "description": {
                  "content": "Extra fields may be ignored or written depending on schema. Accept either 201 or 200 with success.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"Flask\", \"date\": \"2025-01-01\", \"Cost\": 39.99, \"author\": \"xyz\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4141936f-3dab-4fce-af3a-ce6167770dda",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 201 (created) or 200 (accepted) or 400 if validation fails', function () {",
                      "    pm.expect([200,201,400]).to.include(pm.response.code);",
                      "});",
                      "",
                      "pm.test('If created, response includes the extra field or ignores it', function () {",
                      "    try { var j = pm.response.json(); if (pm.response.code===201 || pm.response.code===200) {",
                      "        // optional check",
                      "        if (j.author) { pm.expect(j.author).to.equal('xyz'); }",
                      "    } } catch(e) {}",
                      "});"
                    ],
                    "_lastExecutionId": "5932b961-f432-4644-80c2-678270bd31aa"
                  }
                }
              ]
            },
            {
              "id": "a479ad6a-274c-4b80-bc19-6acbe56b9e80",
              "name": "Create - Database constraint violation (duplicate name) - make name unique in DB before running",
              "request": {
                "description": {
                  "content": "To validate constraint violation, make the 'name' column unique and insert a duplicate. Expects 400 with constraint error.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"FLASK_DUPLICATE_TEST\", \"date\": \"2025-01-01\", \"Cost\": 39.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8182023-0436-4f0b-b4a3-18408e87bc47",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 400) {",
                      "    pm.test('Constraint violation reported', function () {",
                      "        var j = pm.response.json();",
                      "        pm.expect(JSON.stringify(j).toLowerCase()).to.satisfy(function(s){ return s.includes('constraint') || s.includes('duplicate') || s.includes('unique'); });",
                      "    });",
                      "} else {",
                      "    pm.test('DB constraint test not validated', function () { pm.expect.fail('Server did not return 400. Ensure DB uniqueness constraint is applied and re-run. Received: ' + pm.response.code); });",
                      "}"
                    ],
                    "_lastExecutionId": "b8178430-9747-446f-92b4-d9ceac616d63"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d70f6625-aab7-4e9a-ae72-4e3d3d9ff3ec",
          "length": 33,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d8cca146-c517-402e-b8e4-e822f6765b5c",
          "scriptId": "f8182023-0436-4f0b-b4a3-18408e87bc47",
          "execution": "b8178430-9747-446f-92b4-d9ceac616d63"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Missing created_book_id",
          "message": "created_book_id not set. Run Create (positive) first.",
          "stack": "AssertionError: created_book_id not set. Run Create (positive) first.\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "78c6f55ae161e54eec68b860490adac9",
          "id": "1546b2b9-aa08-4cf3-9924-c6dd5ed9da0c",
          "timestamp": 1760368766367,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a66e53e7-a49d-4a70-87f0-fb46153d7cdc",
          "name": "Update - Valid update existing record (uses {{created_book_id}})",
          "request": {
            "description": {
              "content": "Update the previously created book. Ensure {{created_book_id}} is set by the Create positive test.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "update",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101-Updated\", \"date\": \"2025-02-02\", \"Cost\": 59.99}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
                "type": "text/javascript",
                "exec": [
                  "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                  "pm.test('Expect 200 OK for successful update', function() { pm.expect(pm.response.code).to.equal(200); });",
                  "pm.test('Response mentions updated', function() { var txt = pm.response.text(); pm.expect(txt.toLowerCase()).to.include('update'); });"
                ],
                "_lastExecutionId": "7c614590-1cb8-4c23-87e7-279db420cd4a"
              }
            }
          ]
        },
        "parent": {
          "id": "0838a763-289a-48ec-8287-a77165982214",
          "name": "SECTION 3 - Update Book API",
          "item": [
            {
              "id": "a66e53e7-a49d-4a70-87f0-fb46153d7cdc",
              "name": "Update - Valid update existing record (uses {{created_book_id}})",
              "request": {
                "description": {
                  "content": "Update the previously created book. Ensure {{created_book_id}} is set by the Create positive test.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101-Updated\", \"date\": \"2025-02-02\", \"Cost\": 59.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
                    "type": "text/javascript",
                    "exec": [
                      "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                      "pm.test('Expect 200 OK for successful update', function() { pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response mentions updated', function() { var txt = pm.response.text(); pm.expect(txt.toLowerCase()).to.include('update'); });"
                    ],
                    "_lastExecutionId": "7c614590-1cb8-4c23-87e7-279db420cd4a"
                  }
                }
              ]
            },
            {
              "id": "6329c6d5-2ff1-4c18-9af7-b1a72ec6eb2d",
              "name": "Update - Non-existing ID",
              "request": {
                "description": {
                  "content": "Update a non-existing ID. Expected 404 with Book not found.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{non_existing_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"NoSuchBook\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "57961c8e-8e30-45fa-9609-115718e06da3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 Not Found for non-existing ID', function() { pm.expect(pm.response.code).to.equal(404); });",
                      "pm.test('Response mentions not found', function() { var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('not found'); });"
                    ],
                    "_lastExecutionId": "151541ba-dfe0-4cb5-a17a-4a5ebb8f08cf"
                  }
                }
              ]
            },
            {
              "id": "3dc9892e-b497-4788-866d-acabfc0d3d6d",
              "name": "Update - Invalid ID format (abc)",
              "request": {
                "description": {
                  "content": "Invalid ID format should hit Flask routing mismatch and return 404.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "abc"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"InvalidIDTest\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bee0c1b5-6d66-43a7-b7f3-1e9e5bd64134",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for invalid ID format', function() { pm.expect(pm.response.code).to.equal(404); });"
                    ],
                    "_lastExecutionId": "6af184a9-8308-4426-b1e3-09a26e3645d8"
                  }
                }
              ]
            },
            {
              "id": "c76208b2-ae07-4057-b10c-3e1037ff9180",
              "name": "Update - Missing field in update (publisher)",
              "request": {
                "description": {
                  "content": "Update with missing required field. Expect 400 with missing publisher error.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\": \"FlaskPro\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3fabf6f-c3cb-4a03-aaa6-7973f55b6b14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 when required publisher missing', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions publisher', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); } catch(e) { j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('publisher'); });"
                    ],
                    "_lastExecutionId": "d19cec5d-da61-4fac-95b9-37b939db5156"
                  }
                }
              ]
            },
            {
              "id": "d02f5261-44a0-40e3-a0cb-d7efd81b0bc8",
              "name": "Update - Invalid date in update",
              "request": {
                "description": {
                  "content": "Invalid date should return 400.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"FlaskBadDate\", \"date\": \"31-02-2025\", \"Cost\": 25.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8490355f-96f9-4b5b-b11d-697affe0bccc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 for invalid date', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions date', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('date'); });"
                    ],
                    "_lastExecutionId": "fc17e9b0-c9b5-41fe-9078-0093b79f66ea"
                  }
                }
              ]
            },
            {
              "id": "702f6f52-eed5-4661-828d-9f320d19efc9",
              "name": "Update - DB down during update (stop DB before running)",
              "request": {
                "description": {
                  "content": "Stop DB before running. Expects 503. If DB is up test fails with guidance.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"WhileDBDown\", \"date\": \"2025-01-01\", \"Cost\": 1.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "51102f7c-d844-4d3a-bd41-30df64d41c45",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                      "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                    ],
                    "_lastExecutionId": "d562783c-1742-45ab-ac03-0732f1332a75"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "27b7a915-b9c8-4e22-8e8d-6e78ad49d742",
          "length": 33,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "beb0105e-89fe-41d4-a091-494e92f0bfbc",
          "scriptId": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
          "execution": "7c614590-1cb8-4c23-87e7-279db420cd4a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Expect 200 OK for successful update",
          "message": "expected 404 to equal 200",
          "stack": "AssertionError: expected 404 to equal 200\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "bcb2b596439b56387ee5ba446326c740",
          "id": "08b14177-e363-44ed-a4f9-48b7e5946bc6",
          "timestamp": 1760368766372,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a66e53e7-a49d-4a70-87f0-fb46153d7cdc",
          "name": "Update - Valid update existing record (uses {{created_book_id}})",
          "request": {
            "description": {
              "content": "Update the previously created book. Ensure {{created_book_id}} is set by the Create positive test.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "update",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101-Updated\", \"date\": \"2025-02-02\", \"Cost\": 59.99}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
                "type": "text/javascript",
                "exec": [
                  "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                  "pm.test('Expect 200 OK for successful update', function() { pm.expect(pm.response.code).to.equal(200); });",
                  "pm.test('Response mentions updated', function() { var txt = pm.response.text(); pm.expect(txt.toLowerCase()).to.include('update'); });"
                ],
                "_lastExecutionId": "7c614590-1cb8-4c23-87e7-279db420cd4a"
              }
            }
          ]
        },
        "parent": {
          "id": "0838a763-289a-48ec-8287-a77165982214",
          "name": "SECTION 3 - Update Book API",
          "item": [
            {
              "id": "a66e53e7-a49d-4a70-87f0-fb46153d7cdc",
              "name": "Update - Valid update existing record (uses {{created_book_id}})",
              "request": {
                "description": {
                  "content": "Update the previously created book. Ensure {{created_book_id}} is set by the Create positive test.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101-Updated\", \"date\": \"2025-02-02\", \"Cost\": 59.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
                    "type": "text/javascript",
                    "exec": [
                      "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                      "pm.test('Expect 200 OK for successful update', function() { pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response mentions updated', function() { var txt = pm.response.text(); pm.expect(txt.toLowerCase()).to.include('update'); });"
                    ],
                    "_lastExecutionId": "7c614590-1cb8-4c23-87e7-279db420cd4a"
                  }
                }
              ]
            },
            {
              "id": "6329c6d5-2ff1-4c18-9af7-b1a72ec6eb2d",
              "name": "Update - Non-existing ID",
              "request": {
                "description": {
                  "content": "Update a non-existing ID. Expected 404 with Book not found.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{non_existing_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"NoSuchBook\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "57961c8e-8e30-45fa-9609-115718e06da3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 Not Found for non-existing ID', function() { pm.expect(pm.response.code).to.equal(404); });",
                      "pm.test('Response mentions not found', function() { var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('not found'); });"
                    ],
                    "_lastExecutionId": "151541ba-dfe0-4cb5-a17a-4a5ebb8f08cf"
                  }
                }
              ]
            },
            {
              "id": "3dc9892e-b497-4788-866d-acabfc0d3d6d",
              "name": "Update - Invalid ID format (abc)",
              "request": {
                "description": {
                  "content": "Invalid ID format should hit Flask routing mismatch and return 404.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "abc"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"InvalidIDTest\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bee0c1b5-6d66-43a7-b7f3-1e9e5bd64134",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for invalid ID format', function() { pm.expect(pm.response.code).to.equal(404); });"
                    ],
                    "_lastExecutionId": "6af184a9-8308-4426-b1e3-09a26e3645d8"
                  }
                }
              ]
            },
            {
              "id": "c76208b2-ae07-4057-b10c-3e1037ff9180",
              "name": "Update - Missing field in update (publisher)",
              "request": {
                "description": {
                  "content": "Update with missing required field. Expect 400 with missing publisher error.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\": \"FlaskPro\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3fabf6f-c3cb-4a03-aaa6-7973f55b6b14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 when required publisher missing', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions publisher', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); } catch(e) { j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('publisher'); });"
                    ],
                    "_lastExecutionId": "d19cec5d-da61-4fac-95b9-37b939db5156"
                  }
                }
              ]
            },
            {
              "id": "d02f5261-44a0-40e3-a0cb-d7efd81b0bc8",
              "name": "Update - Invalid date in update",
              "request": {
                "description": {
                  "content": "Invalid date should return 400.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"FlaskBadDate\", \"date\": \"31-02-2025\", \"Cost\": 25.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8490355f-96f9-4b5b-b11d-697affe0bccc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 for invalid date', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions date', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('date'); });"
                    ],
                    "_lastExecutionId": "fc17e9b0-c9b5-41fe-9078-0093b79f66ea"
                  }
                }
              ]
            },
            {
              "id": "702f6f52-eed5-4661-828d-9f320d19efc9",
              "name": "Update - DB down during update (stop DB before running)",
              "request": {
                "description": {
                  "content": "Stop DB before running. Expects 503. If DB is up test fails with guidance.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"WhileDBDown\", \"date\": \"2025-01-01\", \"Cost\": 1.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "51102f7c-d844-4d3a-bd41-30df64d41c45",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                      "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                    ],
                    "_lastExecutionId": "d562783c-1742-45ab-ac03-0732f1332a75"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "27b7a915-b9c8-4e22-8e8d-6e78ad49d742",
          "length": 33,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "beb0105e-89fe-41d4-a091-494e92f0bfbc",
          "scriptId": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
          "execution": "7c614590-1cb8-4c23-87e7-279db420cd4a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response mentions updated",
          "message": "expected '{\\n  \"error\": \"resource not found\"\\n}â€¦' to include 'update'",
          "stack": "AssertionError: expected '{\\n  \"error\": \"resource not found\"\\n}â€¦' to include 'update'\n   at Object.eval sandbox-script.js:3:15)",
          "checksum": "6790eb299e4711f89eb3baba0d130a63",
          "id": "1e877661-124a-466e-a2c1-9be3accd75b8",
          "timestamp": 1760368766379,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "a66e53e7-a49d-4a70-87f0-fb46153d7cdc",
          "name": "Update - Valid update existing record (uses {{created_book_id}})",
          "request": {
            "description": {
              "content": "Update the previously created book. Ensure {{created_book_id}} is set by the Create positive test.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "update",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101-Updated\", \"date\": \"2025-02-02\", \"Cost\": 59.99}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
                "type": "text/javascript",
                "exec": [
                  "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                  "pm.test('Expect 200 OK for successful update', function() { pm.expect(pm.response.code).to.equal(200); });",
                  "pm.test('Response mentions updated', function() { var txt = pm.response.text(); pm.expect(txt.toLowerCase()).to.include('update'); });"
                ],
                "_lastExecutionId": "7c614590-1cb8-4c23-87e7-279db420cd4a"
              }
            }
          ]
        },
        "parent": {
          "id": "0838a763-289a-48ec-8287-a77165982214",
          "name": "SECTION 3 - Update Book API",
          "item": [
            {
              "id": "a66e53e7-a49d-4a70-87f0-fb46153d7cdc",
              "name": "Update - Valid update existing record (uses {{created_book_id}})",
              "request": {
                "description": {
                  "content": "Update the previously created book. Ensure {{created_book_id}} is set by the Create positive test.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101-Updated\", \"date\": \"2025-02-02\", \"Cost\": 59.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
                    "type": "text/javascript",
                    "exec": [
                      "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                      "pm.test('Expect 200 OK for successful update', function() { pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response mentions updated', function() { var txt = pm.response.text(); pm.expect(txt.toLowerCase()).to.include('update'); });"
                    ],
                    "_lastExecutionId": "7c614590-1cb8-4c23-87e7-279db420cd4a"
                  }
                }
              ]
            },
            {
              "id": "6329c6d5-2ff1-4c18-9af7-b1a72ec6eb2d",
              "name": "Update - Non-existing ID",
              "request": {
                "description": {
                  "content": "Update a non-existing ID. Expected 404 with Book not found.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{non_existing_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"NoSuchBook\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "57961c8e-8e30-45fa-9609-115718e06da3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 Not Found for non-existing ID', function() { pm.expect(pm.response.code).to.equal(404); });",
                      "pm.test('Response mentions not found', function() { var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('not found'); });"
                    ],
                    "_lastExecutionId": "151541ba-dfe0-4cb5-a17a-4a5ebb8f08cf"
                  }
                }
              ]
            },
            {
              "id": "3dc9892e-b497-4788-866d-acabfc0d3d6d",
              "name": "Update - Invalid ID format (abc)",
              "request": {
                "description": {
                  "content": "Invalid ID format should hit Flask routing mismatch and return 404.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "abc"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"InvalidIDTest\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bee0c1b5-6d66-43a7-b7f3-1e9e5bd64134",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for invalid ID format', function() { pm.expect(pm.response.code).to.equal(404); });"
                    ],
                    "_lastExecutionId": "6af184a9-8308-4426-b1e3-09a26e3645d8"
                  }
                }
              ]
            },
            {
              "id": "c76208b2-ae07-4057-b10c-3e1037ff9180",
              "name": "Update - Missing field in update (publisher)",
              "request": {
                "description": {
                  "content": "Update with missing required field. Expect 400 with missing publisher error.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\": \"FlaskPro\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3fabf6f-c3cb-4a03-aaa6-7973f55b6b14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 when required publisher missing', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions publisher', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); } catch(e) { j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('publisher'); });"
                    ],
                    "_lastExecutionId": "d19cec5d-da61-4fac-95b9-37b939db5156"
                  }
                }
              ]
            },
            {
              "id": "d02f5261-44a0-40e3-a0cb-d7efd81b0bc8",
              "name": "Update - Invalid date in update",
              "request": {
                "description": {
                  "content": "Invalid date should return 400.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"FlaskBadDate\", \"date\": \"31-02-2025\", \"Cost\": 25.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8490355f-96f9-4b5b-b11d-697affe0bccc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 for invalid date', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions date', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('date'); });"
                    ],
                    "_lastExecutionId": "fc17e9b0-c9b5-41fe-9078-0093b79f66ea"
                  }
                }
              ]
            },
            {
              "id": "702f6f52-eed5-4661-828d-9f320d19efc9",
              "name": "Update - DB down during update (stop DB before running)",
              "request": {
                "description": {
                  "content": "Stop DB before running. Expects 503. If DB is up test fails with guidance.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"WhileDBDown\", \"date\": \"2025-01-01\", \"Cost\": 1.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "51102f7c-d844-4d3a-bd41-30df64d41c45",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                      "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                    ],
                    "_lastExecutionId": "d562783c-1742-45ab-ac03-0732f1332a75"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "27b7a915-b9c8-4e22-8e8d-6e78ad49d742",
          "length": 33,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "beb0105e-89fe-41d4-a091-494e92f0bfbc",
          "scriptId": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
          "execution": "7c614590-1cb8-4c23-87e7-279db420cd4a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Expect 400 when required publisher missing",
          "message": "expected 404 to equal 400",
          "stack": "AssertionError: expected 404 to equal 400\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "638de8a9b7d2241081380464a20c634d",
          "id": "432759c7-b1a0-446a-b58d-656b362a9915",
          "timestamp": 1760368767170,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c76208b2-ae07-4057-b10c-3e1037ff9180",
          "name": "Update - Missing field in update (publisher)",
          "request": {
            "description": {
              "content": "Update with missing required field. Expect 400 with missing publisher error.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "update",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"name\": \"FlaskPro\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b3fabf6f-c3cb-4a03-aaa6-7973f55b6b14",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 400 when required publisher missing', function(){ pm.expect(pm.response.code).to.equal(400); });",
                  "pm.test('Error mentions publisher', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); } catch(e) { j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('publisher'); });"
                ],
                "_lastExecutionId": "d19cec5d-da61-4fac-95b9-37b939db5156"
              }
            }
          ]
        },
        "parent": {
          "id": "0838a763-289a-48ec-8287-a77165982214",
          "name": "SECTION 3 - Update Book API",
          "item": [
            {
              "id": "a66e53e7-a49d-4a70-87f0-fb46153d7cdc",
              "name": "Update - Valid update existing record (uses {{created_book_id}})",
              "request": {
                "description": {
                  "content": "Update the previously created book. Ensure {{created_book_id}} is set by the Create positive test.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101-Updated\", \"date\": \"2025-02-02\", \"Cost\": 59.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
                    "type": "text/javascript",
                    "exec": [
                      "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                      "pm.test('Expect 200 OK for successful update', function() { pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response mentions updated', function() { var txt = pm.response.text(); pm.expect(txt.toLowerCase()).to.include('update'); });"
                    ],
                    "_lastExecutionId": "7c614590-1cb8-4c23-87e7-279db420cd4a"
                  }
                }
              ]
            },
            {
              "id": "6329c6d5-2ff1-4c18-9af7-b1a72ec6eb2d",
              "name": "Update - Non-existing ID",
              "request": {
                "description": {
                  "content": "Update a non-existing ID. Expected 404 with Book not found.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{non_existing_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"NoSuchBook\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "57961c8e-8e30-45fa-9609-115718e06da3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 Not Found for non-existing ID', function() { pm.expect(pm.response.code).to.equal(404); });",
                      "pm.test('Response mentions not found', function() { var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('not found'); });"
                    ],
                    "_lastExecutionId": "151541ba-dfe0-4cb5-a17a-4a5ebb8f08cf"
                  }
                }
              ]
            },
            {
              "id": "3dc9892e-b497-4788-866d-acabfc0d3d6d",
              "name": "Update - Invalid ID format (abc)",
              "request": {
                "description": {
                  "content": "Invalid ID format should hit Flask routing mismatch and return 404.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "abc"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"InvalidIDTest\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bee0c1b5-6d66-43a7-b7f3-1e9e5bd64134",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for invalid ID format', function() { pm.expect(pm.response.code).to.equal(404); });"
                    ],
                    "_lastExecutionId": "6af184a9-8308-4426-b1e3-09a26e3645d8"
                  }
                }
              ]
            },
            {
              "id": "c76208b2-ae07-4057-b10c-3e1037ff9180",
              "name": "Update - Missing field in update (publisher)",
              "request": {
                "description": {
                  "content": "Update with missing required field. Expect 400 with missing publisher error.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\": \"FlaskPro\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3fabf6f-c3cb-4a03-aaa6-7973f55b6b14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 when required publisher missing', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions publisher', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); } catch(e) { j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('publisher'); });"
                    ],
                    "_lastExecutionId": "d19cec5d-da61-4fac-95b9-37b939db5156"
                  }
                }
              ]
            },
            {
              "id": "d02f5261-44a0-40e3-a0cb-d7efd81b0bc8",
              "name": "Update - Invalid date in update",
              "request": {
                "description": {
                  "content": "Invalid date should return 400.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"FlaskBadDate\", \"date\": \"31-02-2025\", \"Cost\": 25.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8490355f-96f9-4b5b-b11d-697affe0bccc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 for invalid date', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions date', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('date'); });"
                    ],
                    "_lastExecutionId": "fc17e9b0-c9b5-41fe-9078-0093b79f66ea"
                  }
                }
              ]
            },
            {
              "id": "702f6f52-eed5-4661-828d-9f320d19efc9",
              "name": "Update - DB down during update (stop DB before running)",
              "request": {
                "description": {
                  "content": "Stop DB before running. Expects 503. If DB is up test fails with guidance.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"WhileDBDown\", \"date\": \"2025-01-01\", \"Cost\": 1.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "51102f7c-d844-4d3a-bd41-30df64d41c45",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                      "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                    ],
                    "_lastExecutionId": "d562783c-1742-45ab-ac03-0732f1332a75"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "12c4608d-628f-4279-9541-8813a8f8d6ad",
          "length": 33,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "03abaaa4-7d85-4b25-8dbb-83b3755d45b1",
          "scriptId": "b3fabf6f-c3cb-4a03-aaa6-7973f55b6b14",
          "execution": "d19cec5d-da61-4fac-95b9-37b939db5156"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Error mentions publisher",
          "message": "expected '{\"error\":\"resource not found\"}' to include 'publisher'",
          "stack": "AssertionError: expected '{\"error\":\"resource not found\"}' to include 'publisher'\n   at Object.eval sandbox-script.js:2:18)",
          "checksum": "9c1b2466dcd2790713e66b73c444da7f",
          "id": "70904691-04bf-4c1c-a7ff-9476c0f0200c",
          "timestamp": 1760368767175,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c76208b2-ae07-4057-b10c-3e1037ff9180",
          "name": "Update - Missing field in update (publisher)",
          "request": {
            "description": {
              "content": "Update with missing required field. Expect 400 with missing publisher error.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "update",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"name\": \"FlaskPro\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b3fabf6f-c3cb-4a03-aaa6-7973f55b6b14",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 400 when required publisher missing', function(){ pm.expect(pm.response.code).to.equal(400); });",
                  "pm.test('Error mentions publisher', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); } catch(e) { j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('publisher'); });"
                ],
                "_lastExecutionId": "d19cec5d-da61-4fac-95b9-37b939db5156"
              }
            }
          ]
        },
        "parent": {
          "id": "0838a763-289a-48ec-8287-a77165982214",
          "name": "SECTION 3 - Update Book API",
          "item": [
            {
              "id": "a66e53e7-a49d-4a70-87f0-fb46153d7cdc",
              "name": "Update - Valid update existing record (uses {{created_book_id}})",
              "request": {
                "description": {
                  "content": "Update the previously created book. Ensure {{created_book_id}} is set by the Create positive test.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101-Updated\", \"date\": \"2025-02-02\", \"Cost\": 59.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
                    "type": "text/javascript",
                    "exec": [
                      "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                      "pm.test('Expect 200 OK for successful update', function() { pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response mentions updated', function() { var txt = pm.response.text(); pm.expect(txt.toLowerCase()).to.include('update'); });"
                    ],
                    "_lastExecutionId": "7c614590-1cb8-4c23-87e7-279db420cd4a"
                  }
                }
              ]
            },
            {
              "id": "6329c6d5-2ff1-4c18-9af7-b1a72ec6eb2d",
              "name": "Update - Non-existing ID",
              "request": {
                "description": {
                  "content": "Update a non-existing ID. Expected 404 with Book not found.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{non_existing_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"NoSuchBook\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "57961c8e-8e30-45fa-9609-115718e06da3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 Not Found for non-existing ID', function() { pm.expect(pm.response.code).to.equal(404); });",
                      "pm.test('Response mentions not found', function() { var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('not found'); });"
                    ],
                    "_lastExecutionId": "151541ba-dfe0-4cb5-a17a-4a5ebb8f08cf"
                  }
                }
              ]
            },
            {
              "id": "3dc9892e-b497-4788-866d-acabfc0d3d6d",
              "name": "Update - Invalid ID format (abc)",
              "request": {
                "description": {
                  "content": "Invalid ID format should hit Flask routing mismatch and return 404.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "abc"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"InvalidIDTest\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bee0c1b5-6d66-43a7-b7f3-1e9e5bd64134",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for invalid ID format', function() { pm.expect(pm.response.code).to.equal(404); });"
                    ],
                    "_lastExecutionId": "6af184a9-8308-4426-b1e3-09a26e3645d8"
                  }
                }
              ]
            },
            {
              "id": "c76208b2-ae07-4057-b10c-3e1037ff9180",
              "name": "Update - Missing field in update (publisher)",
              "request": {
                "description": {
                  "content": "Update with missing required field. Expect 400 with missing publisher error.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\": \"FlaskPro\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3fabf6f-c3cb-4a03-aaa6-7973f55b6b14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 when required publisher missing', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions publisher', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); } catch(e) { j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('publisher'); });"
                    ],
                    "_lastExecutionId": "d19cec5d-da61-4fac-95b9-37b939db5156"
                  }
                }
              ]
            },
            {
              "id": "d02f5261-44a0-40e3-a0cb-d7efd81b0bc8",
              "name": "Update - Invalid date in update",
              "request": {
                "description": {
                  "content": "Invalid date should return 400.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"FlaskBadDate\", \"date\": \"31-02-2025\", \"Cost\": 25.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8490355f-96f9-4b5b-b11d-697affe0bccc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 for invalid date', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions date', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('date'); });"
                    ],
                    "_lastExecutionId": "fc17e9b0-c9b5-41fe-9078-0093b79f66ea"
                  }
                }
              ]
            },
            {
              "id": "702f6f52-eed5-4661-828d-9f320d19efc9",
              "name": "Update - DB down during update (stop DB before running)",
              "request": {
                "description": {
                  "content": "Stop DB before running. Expects 503. If DB is up test fails with guidance.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"WhileDBDown\", \"date\": \"2025-01-01\", \"Cost\": 1.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "51102f7c-d844-4d3a-bd41-30df64d41c45",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                      "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                    ],
                    "_lastExecutionId": "d562783c-1742-45ab-ac03-0732f1332a75"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "12c4608d-628f-4279-9541-8813a8f8d6ad",
          "length": 33,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "03abaaa4-7d85-4b25-8dbb-83b3755d45b1",
          "scriptId": "b3fabf6f-c3cb-4a03-aaa6-7973f55b6b14",
          "execution": "d19cec5d-da61-4fac-95b9-37b939db5156"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Expect 400 for invalid date",
          "message": "expected 404 to equal 400",
          "stack": "AssertionError: expected 404 to equal 400\n   at Object.eval sandbox-script.js:1:19)",
          "checksum": "385058fbd7ed89f92eb146574c7fa77f",
          "id": "afff621f-e549-47dd-b6e1-ad96e45eac5f",
          "timestamp": 1760368767357,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d02f5261-44a0-40e3-a0cb-d7efd81b0bc8",
          "name": "Update - Invalid date in update",
          "request": {
            "description": {
              "content": "Invalid date should return 400.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "update",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"Packt\", \"name\": \"FlaskBadDate\", \"date\": \"31-02-2025\", \"Cost\": 25.0}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8490355f-96f9-4b5b-b11d-697affe0bccc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 400 for invalid date', function(){ pm.expect(pm.response.code).to.equal(400); });",
                  "pm.test('Error mentions date', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('date'); });"
                ],
                "_lastExecutionId": "fc17e9b0-c9b5-41fe-9078-0093b79f66ea"
              }
            }
          ]
        },
        "parent": {
          "id": "0838a763-289a-48ec-8287-a77165982214",
          "name": "SECTION 3 - Update Book API",
          "item": [
            {
              "id": "a66e53e7-a49d-4a70-87f0-fb46153d7cdc",
              "name": "Update - Valid update existing record (uses {{created_book_id}})",
              "request": {
                "description": {
                  "content": "Update the previously created book. Ensure {{created_book_id}} is set by the Create positive test.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101-Updated\", \"date\": \"2025-02-02\", \"Cost\": 59.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
                    "type": "text/javascript",
                    "exec": [
                      "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                      "pm.test('Expect 200 OK for successful update', function() { pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response mentions updated', function() { var txt = pm.response.text(); pm.expect(txt.toLowerCase()).to.include('update'); });"
                    ],
                    "_lastExecutionId": "7c614590-1cb8-4c23-87e7-279db420cd4a"
                  }
                }
              ]
            },
            {
              "id": "6329c6d5-2ff1-4c18-9af7-b1a72ec6eb2d",
              "name": "Update - Non-existing ID",
              "request": {
                "description": {
                  "content": "Update a non-existing ID. Expected 404 with Book not found.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{non_existing_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"NoSuchBook\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "57961c8e-8e30-45fa-9609-115718e06da3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 Not Found for non-existing ID', function() { pm.expect(pm.response.code).to.equal(404); });",
                      "pm.test('Response mentions not found', function() { var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('not found'); });"
                    ],
                    "_lastExecutionId": "151541ba-dfe0-4cb5-a17a-4a5ebb8f08cf"
                  }
                }
              ]
            },
            {
              "id": "3dc9892e-b497-4788-866d-acabfc0d3d6d",
              "name": "Update - Invalid ID format (abc)",
              "request": {
                "description": {
                  "content": "Invalid ID format should hit Flask routing mismatch and return 404.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "abc"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"InvalidIDTest\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bee0c1b5-6d66-43a7-b7f3-1e9e5bd64134",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for invalid ID format', function() { pm.expect(pm.response.code).to.equal(404); });"
                    ],
                    "_lastExecutionId": "6af184a9-8308-4426-b1e3-09a26e3645d8"
                  }
                }
              ]
            },
            {
              "id": "c76208b2-ae07-4057-b10c-3e1037ff9180",
              "name": "Update - Missing field in update (publisher)",
              "request": {
                "description": {
                  "content": "Update with missing required field. Expect 400 with missing publisher error.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\": \"FlaskPro\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3fabf6f-c3cb-4a03-aaa6-7973f55b6b14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 when required publisher missing', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions publisher', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); } catch(e) { j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('publisher'); });"
                    ],
                    "_lastExecutionId": "d19cec5d-da61-4fac-95b9-37b939db5156"
                  }
                }
              ]
            },
            {
              "id": "d02f5261-44a0-40e3-a0cb-d7efd81b0bc8",
              "name": "Update - Invalid date in update",
              "request": {
                "description": {
                  "content": "Invalid date should return 400.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"FlaskBadDate\", \"date\": \"31-02-2025\", \"Cost\": 25.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8490355f-96f9-4b5b-b11d-697affe0bccc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 for invalid date', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions date', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('date'); });"
                    ],
                    "_lastExecutionId": "fc17e9b0-c9b5-41fe-9078-0093b79f66ea"
                  }
                }
              ]
            },
            {
              "id": "702f6f52-eed5-4661-828d-9f320d19efc9",
              "name": "Update - DB down during update (stop DB before running)",
              "request": {
                "description": {
                  "content": "Stop DB before running. Expects 503. If DB is up test fails with guidance.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"WhileDBDown\", \"date\": \"2025-01-01\", \"Cost\": 1.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "51102f7c-d844-4d3a-bd41-30df64d41c45",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                      "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                    ],
                    "_lastExecutionId": "d562783c-1742-45ab-ac03-0732f1332a75"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "db5cdfe7-8718-4513-8447-d44a294dc2f2",
          "length": 33,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d8f1758d-4c7f-4bbe-ab5f-b0040f0bef2e",
          "scriptId": "8490355f-96f9-4b5b-b11d-697affe0bccc",
          "execution": "fc17e9b0-c9b5-41fe-9078-0093b79f66ea"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Error mentions date",
          "message": "expected '{\"error\":\"resource not found\"}' to include 'date'",
          "stack": "AssertionError: expected '{\"error\":\"resource not found\"}' to include 'date'\n   at Object.eval sandbox-script.js:2:19)",
          "checksum": "c52482547ee89fa2eb8d9bc3edebdf60",
          "id": "6bdcc361-9b42-4e28-a437-47f652cc1519",
          "timestamp": 1760368767362,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d02f5261-44a0-40e3-a0cb-d7efd81b0bc8",
          "name": "Update - Invalid date in update",
          "request": {
            "description": {
              "content": "Invalid date should return 400.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "update",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"Packt\", \"name\": \"FlaskBadDate\", \"date\": \"31-02-2025\", \"Cost\": 25.0}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8490355f-96f9-4b5b-b11d-697affe0bccc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 400 for invalid date', function(){ pm.expect(pm.response.code).to.equal(400); });",
                  "pm.test('Error mentions date', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('date'); });"
                ],
                "_lastExecutionId": "fc17e9b0-c9b5-41fe-9078-0093b79f66ea"
              }
            }
          ]
        },
        "parent": {
          "id": "0838a763-289a-48ec-8287-a77165982214",
          "name": "SECTION 3 - Update Book API",
          "item": [
            {
              "id": "a66e53e7-a49d-4a70-87f0-fb46153d7cdc",
              "name": "Update - Valid update existing record (uses {{created_book_id}})",
              "request": {
                "description": {
                  "content": "Update the previously created book. Ensure {{created_book_id}} is set by the Create positive test.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101-Updated\", \"date\": \"2025-02-02\", \"Cost\": 59.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
                    "type": "text/javascript",
                    "exec": [
                      "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                      "pm.test('Expect 200 OK for successful update', function() { pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response mentions updated', function() { var txt = pm.response.text(); pm.expect(txt.toLowerCase()).to.include('update'); });"
                    ],
                    "_lastExecutionId": "7c614590-1cb8-4c23-87e7-279db420cd4a"
                  }
                }
              ]
            },
            {
              "id": "6329c6d5-2ff1-4c18-9af7-b1a72ec6eb2d",
              "name": "Update - Non-existing ID",
              "request": {
                "description": {
                  "content": "Update a non-existing ID. Expected 404 with Book not found.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{non_existing_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"NoSuchBook\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "57961c8e-8e30-45fa-9609-115718e06da3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 Not Found for non-existing ID', function() { pm.expect(pm.response.code).to.equal(404); });",
                      "pm.test('Response mentions not found', function() { var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('not found'); });"
                    ],
                    "_lastExecutionId": "151541ba-dfe0-4cb5-a17a-4a5ebb8f08cf"
                  }
                }
              ]
            },
            {
              "id": "3dc9892e-b497-4788-866d-acabfc0d3d6d",
              "name": "Update - Invalid ID format (abc)",
              "request": {
                "description": {
                  "content": "Invalid ID format should hit Flask routing mismatch and return 404.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "abc"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"InvalidIDTest\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bee0c1b5-6d66-43a7-b7f3-1e9e5bd64134",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for invalid ID format', function() { pm.expect(pm.response.code).to.equal(404); });"
                    ],
                    "_lastExecutionId": "6af184a9-8308-4426-b1e3-09a26e3645d8"
                  }
                }
              ]
            },
            {
              "id": "c76208b2-ae07-4057-b10c-3e1037ff9180",
              "name": "Update - Missing field in update (publisher)",
              "request": {
                "description": {
                  "content": "Update with missing required field. Expect 400 with missing publisher error.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\": \"FlaskPro\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3fabf6f-c3cb-4a03-aaa6-7973f55b6b14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 when required publisher missing', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions publisher', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); } catch(e) { j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('publisher'); });"
                    ],
                    "_lastExecutionId": "d19cec5d-da61-4fac-95b9-37b939db5156"
                  }
                }
              ]
            },
            {
              "id": "d02f5261-44a0-40e3-a0cb-d7efd81b0bc8",
              "name": "Update - Invalid date in update",
              "request": {
                "description": {
                  "content": "Invalid date should return 400.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"FlaskBadDate\", \"date\": \"31-02-2025\", \"Cost\": 25.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8490355f-96f9-4b5b-b11d-697affe0bccc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 for invalid date', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions date', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('date'); });"
                    ],
                    "_lastExecutionId": "fc17e9b0-c9b5-41fe-9078-0093b79f66ea"
                  }
                }
              ]
            },
            {
              "id": "702f6f52-eed5-4661-828d-9f320d19efc9",
              "name": "Update - DB down during update (stop DB before running)",
              "request": {
                "description": {
                  "content": "Stop DB before running. Expects 503. If DB is up test fails with guidance.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"WhileDBDown\", \"date\": \"2025-01-01\", \"Cost\": 1.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "51102f7c-d844-4d3a-bd41-30df64d41c45",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                      "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                    ],
                    "_lastExecutionId": "d562783c-1742-45ab-ac03-0732f1332a75"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "db5cdfe7-8718-4513-8447-d44a294dc2f2",
          "length": 33,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d8f1758d-4c7f-4bbe-ab5f-b0040f0bef2e",
          "scriptId": "8490355f-96f9-4b5b-b11d-697affe0bccc",
          "execution": "fc17e9b0-c9b5-41fe-9078-0093b79f66ea"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "DB down test not executed",
          "message": "Database is up. Stop PostgreSQL and re-run request to validate 503. Got: 404",
          "stack": "AssertionError: Database is up. Stop PostgreSQL and re-run request to validate 503. Got: 404\n   at Object.eval sandbox-script.js:1:20)",
          "checksum": "9d9e1a4da1ef493ab1fdade2b94f669a",
          "id": "f0f5c33b-9981-4e52-a621-1415a694fa24",
          "timestamp": 1760368767537,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "702f6f52-eed5-4661-828d-9f320d19efc9",
          "name": "Update - DB down during update (stop DB before running)",
          "request": {
            "description": {
              "content": "Stop DB before running. Expects 503. If DB is up test fails with guidance.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "update",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"Packt\", \"name\": \"WhileDBDown\", \"date\": \"2025-01-01\", \"Cost\": 1.0}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "51102f7c-d844-4d3a-bd41-30df64d41c45",
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                  "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                ],
                "_lastExecutionId": "d562783c-1742-45ab-ac03-0732f1332a75"
              }
            }
          ]
        },
        "parent": {
          "id": "0838a763-289a-48ec-8287-a77165982214",
          "name": "SECTION 3 - Update Book API",
          "item": [
            {
              "id": "a66e53e7-a49d-4a70-87f0-fb46153d7cdc",
              "name": "Update - Valid update existing record (uses {{created_book_id}})",
              "request": {
                "description": {
                  "content": "Update the previously created book. Ensure {{created_book_id}} is set by the Create positive test.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"Flask101-Updated\", \"date\": \"2025-02-02\", \"Cost\": 59.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "287300e3-5af2-46fd-80d8-8a64e000cfb6",
                    "type": "text/javascript",
                    "exec": [
                      "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                      "pm.test('Expect 200 OK for successful update', function() { pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response mentions updated', function() { var txt = pm.response.text(); pm.expect(txt.toLowerCase()).to.include('update'); });"
                    ],
                    "_lastExecutionId": "7c614590-1cb8-4c23-87e7-279db420cd4a"
                  }
                }
              ]
            },
            {
              "id": "6329c6d5-2ff1-4c18-9af7-b1a72ec6eb2d",
              "name": "Update - Non-existing ID",
              "request": {
                "description": {
                  "content": "Update a non-existing ID. Expected 404 with Book not found.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{non_existing_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"NoSuchBook\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "57961c8e-8e30-45fa-9609-115718e06da3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 Not Found for non-existing ID', function() { pm.expect(pm.response.code).to.equal(404); });",
                      "pm.test('Response mentions not found', function() { var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('not found'); });"
                    ],
                    "_lastExecutionId": "151541ba-dfe0-4cb5-a17a-4a5ebb8f08cf"
                  }
                }
              ]
            },
            {
              "id": "3dc9892e-b497-4788-866d-acabfc0d3d6d",
              "name": "Update - Invalid ID format (abc)",
              "request": {
                "description": {
                  "content": "Invalid ID format should hit Flask routing mismatch and return 404.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "abc"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"InvalidIDTest\", \"date\": \"2025-01-01\", \"Cost\": 29.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bee0c1b5-6d66-43a7-b7f3-1e9e5bd64134",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for invalid ID format', function() { pm.expect(pm.response.code).to.equal(404); });"
                    ],
                    "_lastExecutionId": "6af184a9-8308-4426-b1e3-09a26e3645d8"
                  }
                }
              ]
            },
            {
              "id": "c76208b2-ae07-4057-b10c-3e1037ff9180",
              "name": "Update - Missing field in update (publisher)",
              "request": {
                "description": {
                  "content": "Update with missing required field. Expect 400 with missing publisher error.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\": \"FlaskPro\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3fabf6f-c3cb-4a03-aaa6-7973f55b6b14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 when required publisher missing', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions publisher', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); } catch(e) { j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('publisher'); });"
                    ],
                    "_lastExecutionId": "d19cec5d-da61-4fac-95b9-37b939db5156"
                  }
                }
              ]
            },
            {
              "id": "d02f5261-44a0-40e3-a0cb-d7efd81b0bc8",
              "name": "Update - Invalid date in update",
              "request": {
                "description": {
                  "content": "Invalid date should return 400.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"FlaskBadDate\", \"date\": \"31-02-2025\", \"Cost\": 25.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8490355f-96f9-4b5b-b11d-697affe0bccc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 400 for invalid date', function(){ pm.expect(pm.response.code).to.equal(400); });",
                      "pm.test('Error mentions date', function(){ var j=''; try{ j=JSON.stringify(pm.response.json()); }catch(e){ j=pm.response.text(); } pm.expect(j.toLowerCase()).to.include('date'); });"
                    ],
                    "_lastExecutionId": "fc17e9b0-c9b5-41fe-9078-0093b79f66ea"
                  }
                }
              ]
            },
            {
              "id": "702f6f52-eed5-4661-828d-9f320d19efc9",
              "name": "Update - DB down during update (stop DB before running)",
              "request": {
                "description": {
                  "content": "Stop DB before running. Expects 503. If DB is up test fails with guidance.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "update",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"Packt\", \"name\": \"WhileDBDown\", \"date\": \"2025-01-01\", \"Cost\": 1.0}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "51102f7c-d844-4d3a-bd41-30df64d41c45",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                      "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                    ],
                    "_lastExecutionId": "d562783c-1742-45ab-ac03-0732f1332a75"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3f5b2a25-49ae-4b27-b678-43435fdefdcc",
          "length": 33,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4d44b5ae-87f5-4e9f-bbd6-6024ca335006",
          "scriptId": "51102f7c-d844-4d3a-bd41-30df64d41c45",
          "execution": "d562783c-1742-45ab-ac03-0732f1332a75"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Missing created_book_id",
          "message": "created_book_id not set. Run Create (positive) first.",
          "stack": "AssertionError: created_book_id not set. Run Create (positive) first.\n   at Object.eval sandbox-script.js:1:21)",
          "checksum": "45bb406224be7a75f8b59e583a50f83f",
          "id": "8afaf472-48e8-4d71-a9ec-6a1b6ebd21bf",
          "timestamp": 1760368767732,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a0cf52f2-cd25-48c1-b9db-57b72fc9303c",
          "name": "Delete - Valid book (uses {{created_book_id}})",
          "request": {
            "description": {
              "content": "Delete the book created earlier. Ensure created_book_id is set.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "delete",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aded9cc9-b8e5-4025-8da5-839a27ad9d84",
                "type": "text/javascript",
                "exec": [
                  "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                  "pm.test('Expect 200 OK for successful delete', function(){ pm.expect(pm.response.code).to.equal(200); });",
                  "pm.test('Response mentions deleted', function(){ pm.expect(pm.response.text().toLowerCase()).to.include('deleted'); });"
                ],
                "_lastExecutionId": "297d602f-96b2-4799-a9c5-a6cc9df52d2f"
              }
            }
          ]
        },
        "parent": {
          "id": "ed02e6f9-f44d-4d74-ad14-b20d483678f4",
          "name": "SECTION 4 - Delete Book API",
          "item": [
            {
              "id": "a0cf52f2-cd25-48c1-b9db-57b72fc9303c",
              "name": "Delete - Valid book (uses {{created_book_id}})",
              "request": {
                "description": {
                  "content": "Delete the book created earlier. Ensure created_book_id is set.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aded9cc9-b8e5-4025-8da5-839a27ad9d84",
                    "type": "text/javascript",
                    "exec": [
                      "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                      "pm.test('Expect 200 OK for successful delete', function(){ pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response mentions deleted', function(){ pm.expect(pm.response.text().toLowerCase()).to.include('deleted'); });"
                    ],
                    "_lastExecutionId": "297d602f-96b2-4799-a9c5-a6cc9df52d2f"
                  }
                }
              ]
            },
            {
              "id": "d32bb377-5b1f-4ba2-abca-8eb78c0218ba",
              "name": "Delete - Non-existing ID",
              "request": {
                "description": {
                  "content": "Deleting a non-existing ID should return 404 and an error message.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "{{non_existing_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b98e8419-cd60-4dbb-9d98-c795c7339c35",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for non-existing ID', function(){ pm.expect(pm.response.code).to.equal(404); });",
                      "pm.test('Response mentions not found', function(){ pm.expect(pm.response.text().toLowerCase()).to.include('not found'); });"
                    ],
                    "_lastExecutionId": "ad902a9a-3a5c-410f-94d0-f5d82df6bbbd"
                  }
                }
              ]
            },
            {
              "id": "4ae0de74-bbc1-4fa0-ae2c-2706c57d5e49",
              "name": "Delete - Invalid ID type (abc)",
              "request": {
                "description": {
                  "content": "Invalid ID type should return 404 from Flask routing.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "abc"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45354e39-7e12-4fdf-955e-3606f1fd8fca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for invalid ID type', function(){ pm.expect(pm.response.code).to.equal(404); });"
                    ],
                    "_lastExecutionId": "6fbf5347-89ce-4d4f-b4f7-7cd4525fc59d"
                  }
                }
              ]
            },
            {
              "id": "143f6ab0-4091-4aca-b358-a129ac75ac7d",
              "name": "Delete - DB connection down (stop DB before running)",
              "request": {
                "description": {
                  "content": "Stop DB before running. Expect 503.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc9e0652-ed92-4c2e-9095-32e4ca85b9ff",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                      "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                    ],
                    "_lastExecutionId": "b82dbae3-4d4c-4c97-9102-da2ff48870dc"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4aec2e38-7140-4037-a97b-30d4446ffd55",
          "length": 33,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "30589b96-d9fd-46b1-8e27-f88200414653",
          "scriptId": "aded9cc9-b8e5-4025-8da5-839a27ad9d84",
          "execution": "297d602f-96b2-4799-a9c5-a6cc9df52d2f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Expect 200 OK for successful delete",
          "message": "expected 404 to equal 200",
          "stack": "AssertionError: expected 404 to equal 200\n   at Object.eval sandbox-script.js:2:21)",
          "checksum": "8c74ed9675659e799f3900da02a970b6",
          "id": "d089df1b-49d4-4296-8ddb-7864b5126423",
          "timestamp": 1760368767737,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a0cf52f2-cd25-48c1-b9db-57b72fc9303c",
          "name": "Delete - Valid book (uses {{created_book_id}})",
          "request": {
            "description": {
              "content": "Delete the book created earlier. Ensure created_book_id is set.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "delete",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aded9cc9-b8e5-4025-8da5-839a27ad9d84",
                "type": "text/javascript",
                "exec": [
                  "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                  "pm.test('Expect 200 OK for successful delete', function(){ pm.expect(pm.response.code).to.equal(200); });",
                  "pm.test('Response mentions deleted', function(){ pm.expect(pm.response.text().toLowerCase()).to.include('deleted'); });"
                ],
                "_lastExecutionId": "297d602f-96b2-4799-a9c5-a6cc9df52d2f"
              }
            }
          ]
        },
        "parent": {
          "id": "ed02e6f9-f44d-4d74-ad14-b20d483678f4",
          "name": "SECTION 4 - Delete Book API",
          "item": [
            {
              "id": "a0cf52f2-cd25-48c1-b9db-57b72fc9303c",
              "name": "Delete - Valid book (uses {{created_book_id}})",
              "request": {
                "description": {
                  "content": "Delete the book created earlier. Ensure created_book_id is set.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aded9cc9-b8e5-4025-8da5-839a27ad9d84",
                    "type": "text/javascript",
                    "exec": [
                      "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                      "pm.test('Expect 200 OK for successful delete', function(){ pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response mentions deleted', function(){ pm.expect(pm.response.text().toLowerCase()).to.include('deleted'); });"
                    ],
                    "_lastExecutionId": "297d602f-96b2-4799-a9c5-a6cc9df52d2f"
                  }
                }
              ]
            },
            {
              "id": "d32bb377-5b1f-4ba2-abca-8eb78c0218ba",
              "name": "Delete - Non-existing ID",
              "request": {
                "description": {
                  "content": "Deleting a non-existing ID should return 404 and an error message.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "{{non_existing_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b98e8419-cd60-4dbb-9d98-c795c7339c35",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for non-existing ID', function(){ pm.expect(pm.response.code).to.equal(404); });",
                      "pm.test('Response mentions not found', function(){ pm.expect(pm.response.text().toLowerCase()).to.include('not found'); });"
                    ],
                    "_lastExecutionId": "ad902a9a-3a5c-410f-94d0-f5d82df6bbbd"
                  }
                }
              ]
            },
            {
              "id": "4ae0de74-bbc1-4fa0-ae2c-2706c57d5e49",
              "name": "Delete - Invalid ID type (abc)",
              "request": {
                "description": {
                  "content": "Invalid ID type should return 404 from Flask routing.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "abc"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45354e39-7e12-4fdf-955e-3606f1fd8fca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for invalid ID type', function(){ pm.expect(pm.response.code).to.equal(404); });"
                    ],
                    "_lastExecutionId": "6fbf5347-89ce-4d4f-b4f7-7cd4525fc59d"
                  }
                }
              ]
            },
            {
              "id": "143f6ab0-4091-4aca-b358-a129ac75ac7d",
              "name": "Delete - DB connection down (stop DB before running)",
              "request": {
                "description": {
                  "content": "Stop DB before running. Expect 503.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc9e0652-ed92-4c2e-9095-32e4ca85b9ff",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                      "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                    ],
                    "_lastExecutionId": "b82dbae3-4d4c-4c97-9102-da2ff48870dc"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4aec2e38-7140-4037-a97b-30d4446ffd55",
          "length": 33,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "30589b96-d9fd-46b1-8e27-f88200414653",
          "scriptId": "aded9cc9-b8e5-4025-8da5-839a27ad9d84",
          "execution": "297d602f-96b2-4799-a9c5-a6cc9df52d2f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response mentions deleted",
          "message": "expected '{\\n  \"error\": \"resource not found\"\\n}â€¦' to include 'deleted'",
          "stack": "AssertionError: expected '{\\n  \"error\": \"resource not found\"\\n}â€¦' to include 'deleted'\n   at Object.eval sandbox-script.js:3:21)",
          "checksum": "ebe89f0213513c780b64bdba84703ce5",
          "id": "60bd3a39-6d3c-441c-9419-1c9647651bfc",
          "timestamp": 1760368767742,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "a0cf52f2-cd25-48c1-b9db-57b72fc9303c",
          "name": "Delete - Valid book (uses {{created_book_id}})",
          "request": {
            "description": {
              "content": "Delete the book created earlier. Ensure created_book_id is set.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "delete",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aded9cc9-b8e5-4025-8da5-839a27ad9d84",
                "type": "text/javascript",
                "exec": [
                  "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                  "pm.test('Expect 200 OK for successful delete', function(){ pm.expect(pm.response.code).to.equal(200); });",
                  "pm.test('Response mentions deleted', function(){ pm.expect(pm.response.text().toLowerCase()).to.include('deleted'); });"
                ],
                "_lastExecutionId": "297d602f-96b2-4799-a9c5-a6cc9df52d2f"
              }
            }
          ]
        },
        "parent": {
          "id": "ed02e6f9-f44d-4d74-ad14-b20d483678f4",
          "name": "SECTION 4 - Delete Book API",
          "item": [
            {
              "id": "a0cf52f2-cd25-48c1-b9db-57b72fc9303c",
              "name": "Delete - Valid book (uses {{created_book_id}})",
              "request": {
                "description": {
                  "content": "Delete the book created earlier. Ensure created_book_id is set.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aded9cc9-b8e5-4025-8da5-839a27ad9d84",
                    "type": "text/javascript",
                    "exec": [
                      "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                      "pm.test('Expect 200 OK for successful delete', function(){ pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response mentions deleted', function(){ pm.expect(pm.response.text().toLowerCase()).to.include('deleted'); });"
                    ],
                    "_lastExecutionId": "297d602f-96b2-4799-a9c5-a6cc9df52d2f"
                  }
                }
              ]
            },
            {
              "id": "d32bb377-5b1f-4ba2-abca-8eb78c0218ba",
              "name": "Delete - Non-existing ID",
              "request": {
                "description": {
                  "content": "Deleting a non-existing ID should return 404 and an error message.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "{{non_existing_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b98e8419-cd60-4dbb-9d98-c795c7339c35",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for non-existing ID', function(){ pm.expect(pm.response.code).to.equal(404); });",
                      "pm.test('Response mentions not found', function(){ pm.expect(pm.response.text().toLowerCase()).to.include('not found'); });"
                    ],
                    "_lastExecutionId": "ad902a9a-3a5c-410f-94d0-f5d82df6bbbd"
                  }
                }
              ]
            },
            {
              "id": "4ae0de74-bbc1-4fa0-ae2c-2706c57d5e49",
              "name": "Delete - Invalid ID type (abc)",
              "request": {
                "description": {
                  "content": "Invalid ID type should return 404 from Flask routing.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "abc"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45354e39-7e12-4fdf-955e-3606f1fd8fca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for invalid ID type', function(){ pm.expect(pm.response.code).to.equal(404); });"
                    ],
                    "_lastExecutionId": "6fbf5347-89ce-4d4f-b4f7-7cd4525fc59d"
                  }
                }
              ]
            },
            {
              "id": "143f6ab0-4091-4aca-b358-a129ac75ac7d",
              "name": "Delete - DB connection down (stop DB before running)",
              "request": {
                "description": {
                  "content": "Stop DB before running. Expect 503.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc9e0652-ed92-4c2e-9095-32e4ca85b9ff",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                      "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                    ],
                    "_lastExecutionId": "b82dbae3-4d4c-4c97-9102-da2ff48870dc"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4aec2e38-7140-4037-a97b-30d4446ffd55",
          "length": 33,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "30589b96-d9fd-46b1-8e27-f88200414653",
          "scriptId": "aded9cc9-b8e5-4025-8da5-839a27ad9d84",
          "execution": "297d602f-96b2-4799-a9c5-a6cc9df52d2f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "DB down test not executed",
          "message": "Database is up. Stop PostgreSQL and re-run request to validate 503. Got: 404",
          "stack": "AssertionError: Database is up. Stop PostgreSQL and re-run request to validate 503. Got: 404\n   at Object.eval sandbox-script.js:1:24)",
          "checksum": "8c38625004fb60e3914c80f5691702b1",
          "id": "04fafbf6-5c5f-4277-acf5-b8863ee1606b",
          "timestamp": 1760368768503,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "143f6ab0-4091-4aca-b358-a129ac75ac7d",
          "name": "Delete - DB connection down (stop DB before running)",
          "request": {
            "description": {
              "content": "Stop DB before running. Expect 503.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "delete",
                "{{created_book_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dc9e0652-ed92-4c2e-9095-32e4ca85b9ff",
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                  "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                ],
                "_lastExecutionId": "b82dbae3-4d4c-4c97-9102-da2ff48870dc"
              }
            }
          ]
        },
        "parent": {
          "id": "ed02e6f9-f44d-4d74-ad14-b20d483678f4",
          "name": "SECTION 4 - Delete Book API",
          "item": [
            {
              "id": "a0cf52f2-cd25-48c1-b9db-57b72fc9303c",
              "name": "Delete - Valid book (uses {{created_book_id}})",
              "request": {
                "description": {
                  "content": "Delete the book created earlier. Ensure created_book_id is set.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aded9cc9-b8e5-4025-8da5-839a27ad9d84",
                    "type": "text/javascript",
                    "exec": [
                      "if (!pm.environment.get('created_book_id')) { pm.test('Missing created_book_id', function(){ pm.expect.fail('created_book_id not set. Run Create (positive) first.'); }); }",
                      "pm.test('Expect 200 OK for successful delete', function(){ pm.expect(pm.response.code).to.equal(200); });",
                      "pm.test('Response mentions deleted', function(){ pm.expect(pm.response.text().toLowerCase()).to.include('deleted'); });"
                    ],
                    "_lastExecutionId": "297d602f-96b2-4799-a9c5-a6cc9df52d2f"
                  }
                }
              ]
            },
            {
              "id": "d32bb377-5b1f-4ba2-abca-8eb78c0218ba",
              "name": "Delete - Non-existing ID",
              "request": {
                "description": {
                  "content": "Deleting a non-existing ID should return 404 and an error message.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "{{non_existing_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b98e8419-cd60-4dbb-9d98-c795c7339c35",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for non-existing ID', function(){ pm.expect(pm.response.code).to.equal(404); });",
                      "pm.test('Response mentions not found', function(){ pm.expect(pm.response.text().toLowerCase()).to.include('not found'); });"
                    ],
                    "_lastExecutionId": "ad902a9a-3a5c-410f-94d0-f5d82df6bbbd"
                  }
                }
              ]
            },
            {
              "id": "4ae0de74-bbc1-4fa0-ae2c-2706c57d5e49",
              "name": "Delete - Invalid ID type (abc)",
              "request": {
                "description": {
                  "content": "Invalid ID type should return 404 from Flask routing.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "abc"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45354e39-7e12-4fdf-955e-3606f1fd8fca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 for invalid ID type', function(){ pm.expect(pm.response.code).to.equal(404); });"
                    ],
                    "_lastExecutionId": "6fbf5347-89ce-4d4f-b4f7-7cd4525fc59d"
                  }
                }
              ]
            },
            {
              "id": "143f6ab0-4091-4aca-b358-a129ac75ac7d",
              "name": "Delete - DB connection down (stop DB before running)",
              "request": {
                "description": {
                  "content": "Stop DB before running. Expect 503.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "delete",
                    "{{created_book_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc9e0652-ed92-4c2e-9095-32e4ca85b9ff",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                      "else { pm.test('DB down test not executed', function(){ pm.expect.fail('Database is up. Stop PostgreSQL and re-run request to validate 503. Got: '+pm.response.code); }); }"
                    ],
                    "_lastExecutionId": "b82dbae3-4d4c-4c97-9102-da2ff48870dc"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b4735510-0e23-43d5-8985-3645f84af87b",
          "length": 33,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dffaa9b9-6732-4287-a677-76801b0a9d43",
          "scriptId": "dc9e0652-ed92-4c2e-9095-32e4ca85b9ff",
          "execution": "b82dbae3-4d4c-4c97-9102-da2ff48870dc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "DB connection failure not reproduced",
          "message": "Expected 503 when DB host invalid. Ensure server is configured to use invalid DB host and re-run. Received: 200",
          "stack": "AssertionError: Expected 503 when DB host invalid. Ensure server is configured to use invalid DB host and re-run. Received: 200\n   at Object.eval sandbox-script.js:1:25)",
          "checksum": "afab2e9f09f3c665a7c6ebbbf3183852",
          "id": "29695fde-b16b-49c7-ba16-0b7d23be527b",
          "timestamp": 1760368768951,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5a6350e1-7427-4cc6-b61f-7884c9e32336",
          "name": "DB connection failure - change env base_url to invalid host before running",
          "request": {
            "description": {
              "content": "To simulate change DB host, adjust server DB config. Postman cannot change DB host remotely â€” run after changing server config or run against a server configured with invalid DB host.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b49cc2be-2e6a-455b-80ae-baab0c41d264",
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                  "else { pm.test('DB connection failure not reproduced', function(){ pm.expect.fail('Expected 503 when DB host invalid. Ensure server is configured to use invalid DB host and re-run. Received: '+pm.response.code); }); }"
                ],
                "_lastExecutionId": "37a09ffa-0e4d-4762-9516-085e427f39ed"
              }
            }
          ]
        },
        "parent": {
          "id": "5afeae19-faed-4766-adef-5d4832e48c62",
          "name": "SECTION 5-9 - System, Errors, Operational & Contract Checks",
          "item": [
            {
              "id": "5a6350e1-7427-4cc6-b61f-7884c9e32336",
              "name": "DB connection failure - change env base_url to invalid host before running",
              "request": {
                "description": {
                  "content": "To simulate change DB host, adjust server DB config. Postman cannot change DB host remotely â€” run after changing server config or run against a server configured with invalid DB host.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b49cc2be-2e6a-455b-80ae-baab0c41d264",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                      "else { pm.test('DB connection failure not reproduced', function(){ pm.expect.fail('Expected 503 when DB host invalid. Ensure server is configured to use invalid DB host and re-run. Received: '+pm.response.code); }); }"
                    ],
                    "_lastExecutionId": "37a09ffa-0e4d-4762-9516-085e427f39ed"
                  }
                }
              ]
            },
            {
              "id": "14798c41-16fe-44ce-93ee-54fb8fc1e4c8",
              "name": "Unhandled Python exception simulation (modify server route to raise Exception)",
              "request": {
                "description": {
                  "content": "To validate global exception handling temporarily modify server to raise an exception for this route. Expect 500 and a JSON error.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "some-route-that-raises"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82d10a0a-f72e-4986-92e7-003ef9387a32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 500 when server raises unhandled exception', function(){ pm.expect([500,502,503]).to.include(pm.response.code); });",
                      "pm.test('Response contains JSON error field', function(){ try{ var j=pm.response.json(); pm.expect(j).to.have.property('error'); } catch(e) { pm.expect.fail('Response not JSON with error'); } });"
                    ],
                    "_lastExecutionId": "1adff991-edd1-4fe1-8cc1-eb2127462578"
                  }
                }
              ]
            },
            {
              "id": "2f75e601-c496-49b3-ba7e-6d322183118b",
              "name": "JSON decoding error - send malformed JSON",
              "request": {
                "description": {
                  "content": "Sends malformed JSON. Server should return an error (400 or 500) handled globally.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"publisher\": \"Packt\", }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "59455131-40cd-4148-8cff-fa5ff7647b02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 4xx or 5xx for malformed JSON', function(){ pm.expect(pm.response.code).to.be.above(399); });",
                      "pm.test('Response mentions JSON parse or error', function(){ var txt = pm.response.text().toLowerCase(); pm.expect(txt).to.satisfy(function(s){ return s.includes('json') || s.includes('parse') || s.includes('error'); }); });"
                    ],
                    "_lastExecutionId": "d42f92c8-4743-488e-880e-88ca5dbe9946"
                  }
                }
              ]
            },
            {
              "id": "0b3ded0f-18a9-4cb8-82ad-01a45ed9f296",
              "name": "Missing route - GET /unknown",
              "request": {
                "description": {
                  "content": "Hit a missing route. Expect 404 and JSON error message or HTML 404 depending on app configuration.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "unknown"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "840d1989-a15e-42d0-a0b1-dc66b57e5951",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 Not Found', function(){ pm.expect(pm.response.code).to.equal(404); });",
                      "pm.test('If JSON returned it should contain error key', function(){ try{ var j=pm.response.json(); pm.expect(j).to.have.property('error'); } catch(e){ pm.test('Response not JSON - likely HTML 404', function(){ pm.expect(pm.response.code).to.equal(404); }); } });"
                    ],
                    "_lastExecutionId": "c9365af3-c58e-429f-8be2-3eb7ba8881fa"
                  }
                }
              ]
            },
            {
              "id": "5cbfb557-7409-4416-992b-4ead6dc719b2",
              "name": "Invalid HTTP method - PATCH /create (expect 405)",
              "request": {
                "description": {
                  "content": "PATCH is not allowed on /create; expect 405 Method Not Allowed or 404 depending on Flask configuration.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"x\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c70a8350-95ed-4944-a10d-da0b4eda377a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 405 or 404 for invalid method', function(){ pm.expect([404,405]).to.include(pm.response.code); });"
                    ],
                    "_lastExecutionId": "557d6b64-2b70-4e7f-8681-c3c3699dd0e4"
                  }
                }
              ]
            },
            {
              "id": "e6f65a70-2d3a-4e60-938d-f1f4a01f35fe",
              "name": "API contract & consistency - check headers and JSON for GET / and /health",
              "request": {
                "description": {
                  "content": "Verifies Content-Type header and JSON format for a representative endpoint.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12f58465-c5bd-41d9-ab6a-0be2584c0d88",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content-Type header includes application/json', function(){ pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
                      "pm.test('Response is valid JSON', function(){ try{ pm.response.json(); } catch(e){ pm.expect.fail('Response not valid JSON'); } });"
                    ],
                    "_lastExecutionId": "c4224feb-9615-4868-a4c4-e4905172bf78"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ef46fdd2-7e46-4307-8c44-8f67cbb841af",
          "length": 33,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d97e05c7-5f42-441f-a2a7-a71e9eb71ab4",
          "scriptId": "b49cc2be-2e6a-455b-80ae-baab0c41d264",
          "execution": "37a09ffa-0e4d-4762-9516-085e427f39ed"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Expect 500 when server raises unhandled exception",
          "message": "expected [ 500, 502, 503 ] to include 404",
          "stack": "AssertionError: expected [ 500, 502, 503 ] to include 404\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "9631a8958f7611e5ed4ee35eb36f24a9",
          "id": "9cc1d190-bedf-4af4-b808-ea31853418c0",
          "timestamp": 1760368769111,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "14798c41-16fe-44ce-93ee-54fb8fc1e4c8",
          "name": "Unhandled Python exception simulation (modify server route to raise Exception)",
          "request": {
            "description": {
              "content": "To validate global exception handling temporarily modify server to raise an exception for this route. Expect 500 and a JSON error.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "some-route-that-raises"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82d10a0a-f72e-4986-92e7-003ef9387a32",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 500 when server raises unhandled exception', function(){ pm.expect([500,502,503]).to.include(pm.response.code); });",
                  "pm.test('Response contains JSON error field', function(){ try{ var j=pm.response.json(); pm.expect(j).to.have.property('error'); } catch(e) { pm.expect.fail('Response not JSON with error'); } });"
                ],
                "_lastExecutionId": "1adff991-edd1-4fe1-8cc1-eb2127462578"
              }
            }
          ]
        },
        "parent": {
          "id": "5afeae19-faed-4766-adef-5d4832e48c62",
          "name": "SECTION 5-9 - System, Errors, Operational & Contract Checks",
          "item": [
            {
              "id": "5a6350e1-7427-4cc6-b61f-7884c9e32336",
              "name": "DB connection failure - change env base_url to invalid host before running",
              "request": {
                "description": {
                  "content": "To simulate change DB host, adjust server DB config. Postman cannot change DB host remotely â€” run after changing server config or run against a server configured with invalid DB host.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b49cc2be-2e6a-455b-80ae-baab0c41d264",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                      "else { pm.test('DB connection failure not reproduced', function(){ pm.expect.fail('Expected 503 when DB host invalid. Ensure server is configured to use invalid DB host and re-run. Received: '+pm.response.code); }); }"
                    ],
                    "_lastExecutionId": "37a09ffa-0e4d-4762-9516-085e427f39ed"
                  }
                }
              ]
            },
            {
              "id": "14798c41-16fe-44ce-93ee-54fb8fc1e4c8",
              "name": "Unhandled Python exception simulation (modify server route to raise Exception)",
              "request": {
                "description": {
                  "content": "To validate global exception handling temporarily modify server to raise an exception for this route. Expect 500 and a JSON error.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "some-route-that-raises"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82d10a0a-f72e-4986-92e7-003ef9387a32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 500 when server raises unhandled exception', function(){ pm.expect([500,502,503]).to.include(pm.response.code); });",
                      "pm.test('Response contains JSON error field', function(){ try{ var j=pm.response.json(); pm.expect(j).to.have.property('error'); } catch(e) { pm.expect.fail('Response not JSON with error'); } });"
                    ],
                    "_lastExecutionId": "1adff991-edd1-4fe1-8cc1-eb2127462578"
                  }
                }
              ]
            },
            {
              "id": "2f75e601-c496-49b3-ba7e-6d322183118b",
              "name": "JSON decoding error - send malformed JSON",
              "request": {
                "description": {
                  "content": "Sends malformed JSON. Server should return an error (400 or 500) handled globally.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"publisher\": \"Packt\", }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "59455131-40cd-4148-8cff-fa5ff7647b02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 4xx or 5xx for malformed JSON', function(){ pm.expect(pm.response.code).to.be.above(399); });",
                      "pm.test('Response mentions JSON parse or error', function(){ var txt = pm.response.text().toLowerCase(); pm.expect(txt).to.satisfy(function(s){ return s.includes('json') || s.includes('parse') || s.includes('error'); }); });"
                    ],
                    "_lastExecutionId": "d42f92c8-4743-488e-880e-88ca5dbe9946"
                  }
                }
              ]
            },
            {
              "id": "0b3ded0f-18a9-4cb8-82ad-01a45ed9f296",
              "name": "Missing route - GET /unknown",
              "request": {
                "description": {
                  "content": "Hit a missing route. Expect 404 and JSON error message or HTML 404 depending on app configuration.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "unknown"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "840d1989-a15e-42d0-a0b1-dc66b57e5951",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 Not Found', function(){ pm.expect(pm.response.code).to.equal(404); });",
                      "pm.test('If JSON returned it should contain error key', function(){ try{ var j=pm.response.json(); pm.expect(j).to.have.property('error'); } catch(e){ pm.test('Response not JSON - likely HTML 404', function(){ pm.expect(pm.response.code).to.equal(404); }); } });"
                    ],
                    "_lastExecutionId": "c9365af3-c58e-429f-8be2-3eb7ba8881fa"
                  }
                }
              ]
            },
            {
              "id": "5cbfb557-7409-4416-992b-4ead6dc719b2",
              "name": "Invalid HTTP method - PATCH /create (expect 405)",
              "request": {
                "description": {
                  "content": "PATCH is not allowed on /create; expect 405 Method Not Allowed or 404 depending on Flask configuration.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"x\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c70a8350-95ed-4944-a10d-da0b4eda377a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 405 or 404 for invalid method', function(){ pm.expect([404,405]).to.include(pm.response.code); });"
                    ],
                    "_lastExecutionId": "557d6b64-2b70-4e7f-8681-c3c3699dd0e4"
                  }
                }
              ]
            },
            {
              "id": "e6f65a70-2d3a-4e60-938d-f1f4a01f35fe",
              "name": "API contract & consistency - check headers and JSON for GET / and /health",
              "request": {
                "description": {
                  "content": "Verifies Content-Type header and JSON format for a representative endpoint.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12f58465-c5bd-41d9-ab6a-0be2584c0d88",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content-Type header includes application/json', function(){ pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
                      "pm.test('Response is valid JSON', function(){ try{ pm.response.json(); } catch(e){ pm.expect.fail('Response not valid JSON'); } });"
                    ],
                    "_lastExecutionId": "c4224feb-9615-4868-a4c4-e4905172bf78"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a4c496db-dbe7-44f0-bf5c-44e210095fdf",
          "length": 33,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f743ab62-49da-4452-9632-b4ace0c6ba15",
          "scriptId": "82d10a0a-f72e-4986-92e7-003ef9387a32",
          "execution": "1adff991-edd1-4fe1-8cc1-eb2127462578"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Expect 405 or 404 for invalid method",
          "message": "expected [ 404, 405 ] to include 500",
          "stack": "AssertionError: expected [ 404, 405 ] to include 500\n   at Object.eval sandbox-script.js:1:29)",
          "checksum": "b2ef1d7cbc39c058970304fadc61576a",
          "id": "cc8e2b7b-16ac-4265-a2a4-2f63dfb86b07",
          "timestamp": 1760368769770,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 29,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5cbfb557-7409-4416-992b-4ead6dc719b2",
          "name": "Invalid HTTP method - PATCH /create (expect 405)",
          "request": {
            "description": {
              "content": "PATCH is not allowed on /create; expect 405 Method Not Allowed or 404 depending on Flask configuration.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"x\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c70a8350-95ed-4944-a10d-da0b4eda377a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Expect 405 or 404 for invalid method', function(){ pm.expect([404,405]).to.include(pm.response.code); });"
                ],
                "_lastExecutionId": "557d6b64-2b70-4e7f-8681-c3c3699dd0e4"
              }
            }
          ]
        },
        "parent": {
          "id": "5afeae19-faed-4766-adef-5d4832e48c62",
          "name": "SECTION 5-9 - System, Errors, Operational & Contract Checks",
          "item": [
            {
              "id": "5a6350e1-7427-4cc6-b61f-7884c9e32336",
              "name": "DB connection failure - change env base_url to invalid host before running",
              "request": {
                "description": {
                  "content": "To simulate change DB host, adjust server DB config. Postman cannot change DB host remotely â€” run after changing server config or run against a server configured with invalid DB host.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b49cc2be-2e6a-455b-80ae-baab0c41d264",
                    "type": "text/javascript",
                    "exec": [
                      "if (pm.response.code === 503) { pm.test('Database unavailable returned 503', function(){ pm.expect(pm.response.code).to.equal(503); }); }",
                      "else { pm.test('DB connection failure not reproduced', function(){ pm.expect.fail('Expected 503 when DB host invalid. Ensure server is configured to use invalid DB host and re-run. Received: '+pm.response.code); }); }"
                    ],
                    "_lastExecutionId": "37a09ffa-0e4d-4762-9516-085e427f39ed"
                  }
                }
              ]
            },
            {
              "id": "14798c41-16fe-44ce-93ee-54fb8fc1e4c8",
              "name": "Unhandled Python exception simulation (modify server route to raise Exception)",
              "request": {
                "description": {
                  "content": "To validate global exception handling temporarily modify server to raise an exception for this route. Expect 500 and a JSON error.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "some-route-that-raises"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82d10a0a-f72e-4986-92e7-003ef9387a32",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 500 when server raises unhandled exception', function(){ pm.expect([500,502,503]).to.include(pm.response.code); });",
                      "pm.test('Response contains JSON error field', function(){ try{ var j=pm.response.json(); pm.expect(j).to.have.property('error'); } catch(e) { pm.expect.fail('Response not JSON with error'); } });"
                    ],
                    "_lastExecutionId": "1adff991-edd1-4fe1-8cc1-eb2127462578"
                  }
                }
              ]
            },
            {
              "id": "2f75e601-c496-49b3-ba7e-6d322183118b",
              "name": "JSON decoding error - send malformed JSON",
              "request": {
                "description": {
                  "content": "Sends malformed JSON. Server should return an error (400 or 500) handled globally.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"publisher\": \"Packt\", }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "59455131-40cd-4148-8cff-fa5ff7647b02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 4xx or 5xx for malformed JSON', function(){ pm.expect(pm.response.code).to.be.above(399); });",
                      "pm.test('Response mentions JSON parse or error', function(){ var txt = pm.response.text().toLowerCase(); pm.expect(txt).to.satisfy(function(s){ return s.includes('json') || s.includes('parse') || s.includes('error'); }); });"
                    ],
                    "_lastExecutionId": "d42f92c8-4743-488e-880e-88ca5dbe9946"
                  }
                }
              ]
            },
            {
              "id": "0b3ded0f-18a9-4cb8-82ad-01a45ed9f296",
              "name": "Missing route - GET /unknown",
              "request": {
                "description": {
                  "content": "Hit a missing route. Expect 404 and JSON error message or HTML 404 depending on app configuration.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "unknown"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "840d1989-a15e-42d0-a0b1-dc66b57e5951",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 404 Not Found', function(){ pm.expect(pm.response.code).to.equal(404); });",
                      "pm.test('If JSON returned it should contain error key', function(){ try{ var j=pm.response.json(); pm.expect(j).to.have.property('error'); } catch(e){ pm.test('Response not JSON - likely HTML 404', function(){ pm.expect(pm.response.code).to.equal(404); }); } });"
                    ],
                    "_lastExecutionId": "c9365af3-c58e-429f-8be2-3eb7ba8881fa"
                  }
                }
              ]
            },
            {
              "id": "5cbfb557-7409-4416-992b-4ead6dc719b2",
              "name": "Invalid HTTP method - PATCH /create (expect 405)",
              "request": {
                "description": {
                  "content": "PATCH is not allowed on /create; expect 405 Method Not Allowed or 404 depending on Flask configuration.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"x\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c70a8350-95ed-4944-a10d-da0b4eda377a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Expect 405 or 404 for invalid method', function(){ pm.expect([404,405]).to.include(pm.response.code); });"
                    ],
                    "_lastExecutionId": "557d6b64-2b70-4e7f-8681-c3c3699dd0e4"
                  }
                }
              ]
            },
            {
              "id": "e6f65a70-2d3a-4e60-938d-f1f4a01f35fe",
              "name": "API contract & consistency - check headers and JSON for GET / and /health",
              "request": {
                "description": {
                  "content": "Verifies Content-Type header and JSON format for a representative endpoint.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12f58465-c5bd-41d9-ab6a-0be2584c0d88",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content-Type header includes application/json', function(){ pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
                      "pm.test('Response is valid JSON', function(){ try{ pm.response.json(); } catch(e){ pm.expect.fail('Response not valid JSON'); } });"
                    ],
                    "_lastExecutionId": "c4224feb-9615-4868-a4c4-e4905172bf78"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bc6629ef-bb87-4bb9-a2ec-50b4b411d38f",
          "length": 33,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8fcb4626-c148-4321-905f-f67330a6e6cc",
          "scriptId": "c70a8350-95ed-4944-a10d-da0b4eda377a",
          "execution": "557d6b64-2b70-4e7f-8681-c3c3699dd0e4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Books response matches schema",
          "message": "expected false to be true",
          "stack": "AssertionError: expected false to be true\n   at Object.eval sandbox-script.js:1:32)",
          "checksum": "a03682f2e7852b91d9c17e1921ddd976",
          "id": "7a06e4bb-3096-480d-8b36-283424e4497f",
          "timestamp": 1760368770942,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d0b77e02-1882-4450-8d37-b09546d56a38",
          "name": "Schema - Get all books (array of book objects)",
          "request": {
            "description": {
              "content": "Validate GET / returns an array of book objects",
              "type": "text/plain"
            },
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "13c8f3ce-2964-49ea-86ed-636927a6b0c5",
                "type": "text/javascript",
                "exec": [
                  "var booksSchema = {",
                  "  'type': 'array',",
                  "  'items': {",
                  "    'type': 'object',",
                  "    'properties': {",
                  "      'id': { 'type': ['integer','number','null'] },",
                  "      'publisher': { 'type': 'string' },",
                  "      'name': { 'type': 'string' },",
                  "      'date': { 'type': 'string' },",
                  "      'Cost': { 'type': ['number','integer'] }",
                  "    },",
                  "    'required': ['publisher','name','date','Cost']",
                  "  }",
                  "};",
                  "pm.test('Books response matches schema', function() {",
                  "  var json = pm.response.json();",
                  "  pm.expect(tv4.validate(json, booksSchema)).to.be.true;",
                  "  if (!tv4.validate(json, booksSchema)) { console.log(tv4.error); }",
                  "});"
                ],
                "_lastExecutionId": "1f819bbc-f3be-4c3c-9c4c-786e24860456"
              }
            }
          ]
        },
        "parent": {
          "id": "1b69542f-90a0-4d96-87fe-a594135cf9b4",
          "name": "Schema Validation Tests",
          "item": [
            {
              "id": "df6af206-8dd2-48fd-976f-ea52e81dce89",
              "name": "Schema - Health endpoint",
              "request": {
                "description": {
                  "content": "Validate /health response against schema: {status: string}",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "84ab08b4-a962-4165-a081-691c7985bbd9",
                    "type": "text/javascript",
                    "exec": [
                      "var healthSchema = {",
                      "  'type': 'object',",
                      "  'properties': { 'status': { 'type': 'string' } },",
                      "  'required': ['status']",
                      "};",
                      "pm.test('Health response matches schema', function() {",
                      "  var json = pm.response.json();",
                      "  pm.expect(tv4.validate(json, healthSchema)).to.be.true;",
                      "  if (!tv4.validate(json, healthSchema)) {",
                      "    console.log(tv4.error);",
                      "  }",
                      "});"
                    ],
                    "_lastExecutionId": "9ea13118-707d-4381-80b3-39dace2bb731"
                  }
                }
              ]
            },
            {
              "id": "d0b77e02-1882-4450-8d37-b09546d56a38",
              "name": "Schema - Get all books (array of book objects)",
              "request": {
                "description": {
                  "content": "Validate GET / returns an array of book objects",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13c8f3ce-2964-49ea-86ed-636927a6b0c5",
                    "type": "text/javascript",
                    "exec": [
                      "var booksSchema = {",
                      "  'type': 'array',",
                      "  'items': {",
                      "    'type': 'object',",
                      "    'properties': {",
                      "      'id': { 'type': ['integer','number','null'] },",
                      "      'publisher': { 'type': 'string' },",
                      "      'name': { 'type': 'string' },",
                      "      'date': { 'type': 'string' },",
                      "      'Cost': { 'type': ['number','integer'] }",
                      "    },",
                      "    'required': ['publisher','name','date','Cost']",
                      "  }",
                      "};",
                      "pm.test('Books response matches schema', function() {",
                      "  var json = pm.response.json();",
                      "  pm.expect(tv4.validate(json, booksSchema)).to.be.true;",
                      "  if (!tv4.validate(json, booksSchema)) { console.log(tv4.error); }",
                      "});"
                    ],
                    "_lastExecutionId": "1f819bbc-f3be-4c3c-9c4c-786e24860456"
                  }
                }
              ]
            },
            {
              "id": "6f310ece-bb19-4279-972e-9ce79cfa2927",
              "name": "Schema - Create book response (object)",
              "request": {
                "description": {
                  "content": "Validate POST /create response conforms to the created book object schema.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"SchemaTestBook\", \"date\": \"2025-01-01\", \"Cost\": 9.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "841aa4c5-3df6-43d3-97d3-60556959d25c",
                    "type": "text/javascript",
                    "exec": [
                      "var bookSchema = {",
                      "  'type': 'object',",
                      "  'properties': {",
                      "    'id': { 'type': ['integer','number'] },",
                      "    'publisher': { 'type': 'string' },",
                      "    'name': { 'type': 'string' },",
                      "    'date': { 'type': 'string' },",
                      "    'Cost': { 'type': ['number','integer'] }",
                      "  },",
                      "  'required': ['publisher','name','date','Cost']",
                      "};",
                      "pm.test('Create response matches book schema', function() {",
                      "  try { var json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                      "  pm.expect(tv4.validate(json, bookSchema)).to.be.true;",
                      "  if (!tv4.validate(json, bookSchema)) { console.log(tv4.error); }",
                      "});",
                      "",
                      "// Save created id if present",
                      "try { var j = pm.response.json(); if (j.id) { pm.environment.set('created_book_id', j.id); } } catch(e) {}"
                    ],
                    "_lastExecutionId": "51c13ce4-b257-4558-93e4-2b57a1f072fa"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5ecd2741-adb1-4cb6-b416-b763d15bb0b3",
          "length": 33,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6476230a-9e04-4169-a023-49cc7d09b181",
          "scriptId": "13c8f3ce-2964-49ea-86ed-636927a6b0c5",
          "execution": "1f819bbc-f3be-4c3c-9c4c-786e24860456"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Create response matches book schema",
          "message": "expected false to be true",
          "stack": "AssertionError: expected false to be true\n   at Object.eval sandbox-script.js:1:33)",
          "checksum": "0a4cdb14836899846bc7eb7fe41d9181",
          "id": "ee58d62b-4eb3-4f95-99bb-3948d29b2f33",
          "timestamp": 1760368771284,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 33,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6f310ece-bb19-4279-972e-9ce79cfa2927",
          "name": "Schema - Create book response (object)",
          "request": {
            "description": {
              "content": "Validate POST /create response conforms to the created book object schema.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"SchemaTestBook\", \"date\": \"2025-01-01\", \"Cost\": 9.99}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "841aa4c5-3df6-43d3-97d3-60556959d25c",
                "type": "text/javascript",
                "exec": [
                  "var bookSchema = {",
                  "  'type': 'object',",
                  "  'properties': {",
                  "    'id': { 'type': ['integer','number'] },",
                  "    'publisher': { 'type': 'string' },",
                  "    'name': { 'type': 'string' },",
                  "    'date': { 'type': 'string' },",
                  "    'Cost': { 'type': ['number','integer'] }",
                  "  },",
                  "  'required': ['publisher','name','date','Cost']",
                  "};",
                  "pm.test('Create response matches book schema', function() {",
                  "  try { var json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                  "  pm.expect(tv4.validate(json, bookSchema)).to.be.true;",
                  "  if (!tv4.validate(json, bookSchema)) { console.log(tv4.error); }",
                  "});",
                  "",
                  "// Save created id if present",
                  "try { var j = pm.response.json(); if (j.id) { pm.environment.set('created_book_id', j.id); } } catch(e) {}"
                ],
                "_lastExecutionId": "51c13ce4-b257-4558-93e4-2b57a1f072fa"
              }
            }
          ]
        },
        "parent": {
          "id": "1b69542f-90a0-4d96-87fe-a594135cf9b4",
          "name": "Schema Validation Tests",
          "item": [
            {
              "id": "df6af206-8dd2-48fd-976f-ea52e81dce89",
              "name": "Schema - Health endpoint",
              "request": {
                "description": {
                  "content": "Validate /health response against schema: {status: string}",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "84ab08b4-a962-4165-a081-691c7985bbd9",
                    "type": "text/javascript",
                    "exec": [
                      "var healthSchema = {",
                      "  'type': 'object',",
                      "  'properties': { 'status': { 'type': 'string' } },",
                      "  'required': ['status']",
                      "};",
                      "pm.test('Health response matches schema', function() {",
                      "  var json = pm.response.json();",
                      "  pm.expect(tv4.validate(json, healthSchema)).to.be.true;",
                      "  if (!tv4.validate(json, healthSchema)) {",
                      "    console.log(tv4.error);",
                      "  }",
                      "});"
                    ],
                    "_lastExecutionId": "9ea13118-707d-4381-80b3-39dace2bb731"
                  }
                }
              ]
            },
            {
              "id": "d0b77e02-1882-4450-8d37-b09546d56a38",
              "name": "Schema - Get all books (array of book objects)",
              "request": {
                "description": {
                  "content": "Validate GET / returns an array of book objects",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13c8f3ce-2964-49ea-86ed-636927a6b0c5",
                    "type": "text/javascript",
                    "exec": [
                      "var booksSchema = {",
                      "  'type': 'array',",
                      "  'items': {",
                      "    'type': 'object',",
                      "    'properties': {",
                      "      'id': { 'type': ['integer','number','null'] },",
                      "      'publisher': { 'type': 'string' },",
                      "      'name': { 'type': 'string' },",
                      "      'date': { 'type': 'string' },",
                      "      'Cost': { 'type': ['number','integer'] }",
                      "    },",
                      "    'required': ['publisher','name','date','Cost']",
                      "  }",
                      "};",
                      "pm.test('Books response matches schema', function() {",
                      "  var json = pm.response.json();",
                      "  pm.expect(tv4.validate(json, booksSchema)).to.be.true;",
                      "  if (!tv4.validate(json, booksSchema)) { console.log(tv4.error); }",
                      "});"
                    ],
                    "_lastExecutionId": "1f819bbc-f3be-4c3c-9c4c-786e24860456"
                  }
                }
              ]
            },
            {
              "id": "6f310ece-bb19-4279-972e-9ce79cfa2927",
              "name": "Schema - Create book response (object)",
              "request": {
                "description": {
                  "content": "Validate POST /create response conforms to the created book object schema.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"publisher\": \"O'Reilly\", \"name\": \"SchemaTestBook\", \"date\": \"2025-01-01\", \"Cost\": 9.99}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "841aa4c5-3df6-43d3-97d3-60556959d25c",
                    "type": "text/javascript",
                    "exec": [
                      "var bookSchema = {",
                      "  'type': 'object',",
                      "  'properties': {",
                      "    'id': { 'type': ['integer','number'] },",
                      "    'publisher': { 'type': 'string' },",
                      "    'name': { 'type': 'string' },",
                      "    'date': { 'type': 'string' },",
                      "    'Cost': { 'type': ['number','integer'] }",
                      "  },",
                      "  'required': ['publisher','name','date','Cost']",
                      "};",
                      "pm.test('Create response matches book schema', function() {",
                      "  try { var json = pm.response.json(); } catch(e) { pm.expect.fail('Response not JSON'); }",
                      "  pm.expect(tv4.validate(json, bookSchema)).to.be.true;",
                      "  if (!tv4.validate(json, bookSchema)) { console.log(tv4.error); }",
                      "});",
                      "",
                      "// Save created id if present",
                      "try { var j = pm.response.json(); if (j.id) { pm.environment.set('created_book_id', j.id); } } catch(e) {}"
                    ],
                    "_lastExecutionId": "51c13ce4-b257-4558-93e4-2b57a1f072fa"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6372bd33-9b42-4685-85c1-9790966c9b11",
          "length": 33,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0507e549-af4b-4339-aef5-72f1e8f6e1fc",
          "scriptId": "841aa4c5-3df6-43d3-97d3-60556959d25c",
          "execution": "51c13ce4-b257-4558-93e4-2b57a1f072fa"
        }
      }
    ],
    "error": null
  }
}